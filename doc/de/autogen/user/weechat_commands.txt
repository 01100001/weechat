[command]*`away`* Abwesenheitsstatus ein-/ausschalten::
........................................
/away  [-all] [<message>]

   -all: Abwesenheitszustand auf allen Servern ändern
message: Abwesenheitsnachricht (ohne eine Nachricht wird der Abwesenheitszustand deaktivieren)
........................................

[command]*`bar`* Infobars verwalten::
........................................
/bar  list|listfull|listitems
      add <name> <type>[,<cond1>[,<cond2>...]] <position> <size> <separator> <item1>[,<item2>...]
      default
      del <name>|-all
      set <name> <option> <value>
      hide|show|toggle <name>
      scroll <name> <buffer> <scroll_value>

         list: listet alle Infobars auf
     listfull: listet alle Infobars detailliert auf (Standardaufruf)
    listitems: listet alle Items auf, die in den Infobars genutzt werden
          add: füge eine neue Infobar hinzu
         name: Name der Infobar (muss einmalig sein)
         type:   root: außerhalb des Fensters,
               window: innerhalb des Fensters, mit optionalen Merkmalen (siehe unten)
    cond1,...: Merkmal(e) für eine Infobar (nur nutzbar mit der Type-Option "window"):
                 active: in einem aktiven Fenster
               inactive: in einem inaktiven Fenster
               nicklist: in Fenstern mit einer Nickliste
               werden keine Merkmale angegeben, ist die Infobar immer sichtbar
     position: bottom (unten), top (oben), left (links) oder right (rechts)
         size: Größe der Infobar (in Zeichen)
    separator: 1 um eine Trennlinien zu zeichnen, bei 0 oder ohne eine Angabe wird keine Trennlinien gezeichnet
    item1,...: Items die in der Infobar genutzt werden sollen (Items können durch Kommata oder Leerzeichen getrennt werden ("+" (verbindet Items))
      default: erstellt standardisierte Infobars
          del: entfernt eine Infobar (alle Infobars können mit der Option "-all" entfernt werden).
          set: setzt einen Wert für Infobar
       option: Optionen die geändert werden (für eine List der möglichen Optionen, bitte folgenden Befehl nutzen: /set weechat.bar.<barname>.*)
        value: neuer Wert für Option
         hide: Infobar wird ausgeblendet
         show: zeigt eine ausgeblendete Infobar an
       toggle: zeigt/versteckt eine Infobar
       scroll: scrollt Infobar hoch/runter
       buffer: Name des Buffer der gescrollt werden soll ('*' für aktuellen Buffer, man sollte '*' für root-Infobars nutzen)
 scroll_value: Werte für Scroll-Funktion: 'x' oder 'y', gefolgt von '+', '-', 'b' (Beginn) oder 'e' (Ende), Wert (für +/-), und Optional %% (zum scrollen für %% der Breite/Höhe, ansonsten wird der Wert als Anzahl der Zeichen interpretiert um die gescrollt werden soll)

Beispiele:
  erstellt eine Infobar mit den Items: time, buffer number + name, und Vervollständigung:
    /bar add mybar root bottom 1 0 [time],buffer_number+:+buffer_name,completion
  versteckt die Infobar (meinebar):
    /bar hide meinebar
  scrollt die Nickliste im aktuellen Buffer um 10 Zeilen nach unten:
    /bar scroll nicklist * y+10
  scrollt die Nickliste im Buffer #weechat eine ganze Seite nach oben:
    /bar scroll nicklist #weechat y-100%
  scrollt zum Ende der Nicklist im aktuellen Buffer:
    /bar scroll nicklist * ye
........................................

[command]*`buffer`* Buffer verwalten::
........................................
/buffer  list
         clear [<number>|-merged|-all]
         move|merge <number>
         unmerge [<number>]
         close [<n1>[-<n2>]]
         notify <level>
         localvar
         set <property> <value>
         get <property>
         <number>|<name>

    list: alle geöffneten Buffer werden aufgelistet (Standardvorgabe)
   clear: leert den Bufferinhalt. Entweder durch Angabe der Buffer-Nummer, -merged für zusammengefügte Buffer, -all für alle Buffer. Ohne Angabe eines Arguments wird der aktuelle Buffer gelöscht
    move: Buffer in der Liste verschieben (kann auch relativ sein, z.B. -1)
   merge: fügt den aktuellen Buffer mit einem anderen Buffer zusammen (bei einem Chat-Buffer entsteht ein Mix aus beiden Buffern
         (Bei der Standardtastenbelegung kann mittels "CTRL-x" zwischen zusammengefügten Buffern umgeschaltet werden)
 unmerge: trennt Buffer wieder voneinander, falls zwei Buffer die selbe Nummer teilen
   close: Buffer schließen (Nummer oder Bereich ist optional)
  notify: setzt Benachrichtigung-Status für aktuellen Buffer. Folgende Möglichkeiten bestimmen den Grad der Benachrichtigung:
            none: keine Benachrichtigung
       highlight: Benachrichtigung bei hervorgehobenen Nachrichten (Highlights)
         message: Benachrichtigung bei Nachrichten von Usern + Highlights
             all: Benachrichtigung bei allen Nachrichten
           reset: auf Standardwert zurück setzen (all)
localvar: zeigt die lokalen Variablen für den aktuellen Buffer an
     set: setzt eine Eigenschaft für aktuellen Buffer
     get: zeigt eine Eigenschaft für den aktuellen Buffer an
  number: Sprung von einem Buffer zu einem anderen, mögliche Optionen:
          '+': relativer Sprung um 'n'-Buffer
          '-': relativer Sprung, um 'n'-Buffer
          '*': springt zum Buffer mit der Nummer 'n', nutzt die interne Option "weechat.look.jump_current_to_previous_buffer"
    name: springt zum Buffer mit dem Namen 'xyz'

Beispiele:
 leert den aktuellen Buffer:
 /buffer clear
 verschiebt Buffer auf Position 5:
 /buffer move 5
 verbindet Buffer mit dem Core-Buffer:
 /buffer merge 1
 trennt Buffer voneinander:
 /buffer unmerge
 schließt aktuellen Buffer:
 /buffer close
 schließt Buffer 5 bis 7:
 /buffer close 5-7
 wechselt zum Buffer: #weechat:
 /buffer #weechat
  wechselt zum nächsten Buffer:
 /buffer +1
........................................

[command]*`color`* definiert Farbaliase und stellt eine Palette der möglichen Farben dar::
........................................
/color  alias <color> <alias>
        unalias <color>
        reset

  alias: weißt einer Farbzahl einen Namen zu
unalias: entfernt einen Namen
  color: Farbnummer (>= 0, maximale Anzahl ist abhängig vom Terminal, üblicherweise 63 oder 255)
   name: Aliasname für eine Farbe (zum Beispiel: "orange")
  reset: setzt alle Farbpaarungen zurück (nützlich falls keine Farbpaarung mehr verfügbar sein sollte)

Ohne Angabe von Argumenten wird in einem neuen Buffer die nutzbare Farbpalette angezeigt.

Beispiele:
  der Farbe 214 wird das Alias "orange" zugeordnet:
    /color alias 214 orange
  löscht die Farbe 214:
    /color unalias 214
........................................

[command]*`command`* führe explizit einen WeeChat Befehl oder eine Erweiterung aus::
........................................
/command  <plugin> <command>

Erweiterung: Name der Erweiterung ('weechat' für interne WeeChat Befehle)
    Befehl: auszuführender Befehl (es wird automatisch ein '/' vorangestellt, falls dieser nicht angegeben wurde)
........................................

[command]*`debug`* Debug-Kontrolle für Hauptprogramm und/oder Erweiterung::
........................................
/debug  list
        set <plugin> <level>
        dump [<plugin>]
        buffer|color|memory|term|windows

   list: zeigt alle Erweiterungen mit Debuglevel an
    set: setzt den Level der Protokollierung für eine Erweiterung
 plugin: Name der Erweiterung ("core" für den WeeChat Kern)
  level: Debuglevel der Erweiterung (0 = deaktiviert das Debug)
   dump: Speicherabbild in die WeeChat Protokolldatei schreiben (wie bei einem Programmabsturz)
 buffer: speichert den Bufferinhalt als hexadezimale Ausgabe in die Protokolldatei
  color: zeigt Informationen über die aktuellen Farbpaarungen an
 memory: gibt Informationen über den genutzten Speicher aus
   term: gibt Informationen über das Terminal und verfügbare Farben aus
windows: zeigt die Fensterstruktur an
........................................

[command]*`filter`* Filterfunktion um Nachrichten in Buffern zu aus- oder einzublenden, dazu können Tags oder regulären Ausdrücken verwendet werden::
........................................
/filter  list
         enable|disable|toggle [<name>]
         add <name> <buffer>[,<buffer>...] <tags> <regex>
         del <name>|-all

   list: list all filters
 enable: enable filters (filters are enabled by default)
disable: disable filters
 toggle: toggle filters
   name: filter name
    add: add a filter
    del: delete a filter
   -all: delete all filters
 buffer: comma separated list of buffers where filter is active:
         - this is full name including plugin (example: "irc.freenode.#weechat")
         - "*" means all buffers
         - a name starting with '!' is excluded
         - name can start or end with '*' to match many buffers
   tags: comma separated list of tags, for example: "irc_join,irc_part,irc_quit"
  regex: regular expression to search in line
         - use '\t' to separate prefix from message, special chars like '|' must be escaped: '\|'
         - if regex starts with '!', then matching result is reversed (use '\!' to start with '!')
         - two regular expressions are created: one for prefix and one for message

The default key alt+'=' toggles filtering on/off.

Tags most commonly used:
  no_filter, no_highlight, no_log, log0..log9 (log level),
  notify_message, notify_private, notify_highlight,
  nick_xxx (xxx is nick in message),
  irc_xxx (xxx is command name or number, see /server raw),
  irc_numeric, irc_error, irc_action, irc_ctcp, irc_ctcp_reply, irc_smart_filter, away_info.

Examples:
  use IRC smart filter on all buffers:
    /filter add irc_smart * irc_smart_filter *
  use IRC smart filter on all buffers except those with "#weechat" in name:
    /filter add irc_smart *,!*#weechat* irc_smart_filter *
  filter all IRC join/part/quit messages:
    /filter add joinquit * irc_join,irc_part,irc_quit *
  filter nicks displayed when joining channels or with /names:
    /filter add nicks * irc_366 *
  filter nick "toto" on IRC channel #weechat:
    /filter add toto irc.freenode.#weechat * toto\t
  keep only nick "titi" on IRC channel #test:
    /filter add titi irc.freenode.#test * !titi\t
  filter lines containing word "spam":
    /filter add filterspam * * spam
  filter lines containing "weechat sucks" on IRC channel #weechat:
    /filter add sucks irc.freenode.#weechat * weechat sucks
........................................

[command]*`help`* Zeigt einen Hilfstext für Befehle und Optionen an::
........................................
/help  -list|-listfull [<plugin> [<plugin>...]]
       <command>
       <option>

    -list: zeigt alle Befehle, nach Erweiterungen sortiert (ohne Angabe von Argumente wird diese Liste ausgegeben)
-listfull: zeigt alle Befehle mit Beschreibung, nach Erweiterung
   plugin: zeigt Befehle explizit für diese Erweiterung an
  command: Name eines Befehls
   option: Name einer Option (nutze /set um Optionen anzeigen zu lassen)
........................................

[command]*`history`* Zeigt den Befehlsverlauf des Buffers::
........................................
/history  clear
          <value>

clear: löscht den Befehlsverlauf
value: Anzahl der gewünschten Einträgen im Befehlsverlauf anzeigen
........................................

[command]*`input`* Funktionen für die Befehlszeile::
........................................
/input  <action> [<arguments>]

Liste der Aktionen:
  return: simuliert die "enter" Taste
  complete_next: vervollständigt Word mit nächster Komplettierung
  complete_previous: vervollständigt Word mit vorheriger Komplettierung
  search_text: sucht nach Text im Buffer
  delete_previous_char: entfernt vorheriges Zeichen
  delete_next_char: entfernt nächstes Zeichen
  delete_previous_word: entfernt vorheriges Wort
  delete_next_word: entfernt nächstes Wort
  delete_beginning_of_line: entfernt alle Zeichen ab Zeilenanfang bis zum Cursor
  delete_end_of_line: entfernt alle Zeichen ab Cursor bis zum Ende der Zeile
  delete_line: löscht die komplette Eingabezeile
  clipboard_paste: fügt Zeichenkette aus der Zwischenablage ein
  transpose_chars: Zeichen austauschen
  undo: letzten Befehl in der Eingabezeile rückgängig machen
  redo: letzten Befehl in der Eingabezeile wiederherstellen
  move_beginning_of_line: springt an den Anfang der Eingabezeile
  move_end_of_line: springt ans Ende der Eingabezeile
  move_previous_char: setzt den Cursor eine Position nach links
  move_next_char: setzt den Cursor eine Position nach rechts
  move_previous_word: springt zum Anfang des vorherigen Wortes, in der Eingabezeile
  move_next_word: springt zum Anfang des nächsten Wortes, in der Eingabezeile
  history_previous: ruft vorherigen Befehl oder Nachricht aus dem Befehlsspeicher auf (im Such-Modus: rückwärts suchen)
  history_next: ruft nächsten Befehl oder Nachricht aus dem Befehlsspeicher auf (im Such-Modus: vorwärts suchen)
  history_global_previous: ruft vorherigen Befehl/Nachricht aus dem globalen Befehlsspeicher auf (für alle Buffer)
  history_global_next: ruft nächsten Befehl/Nachricht aus dem globalen Befehlsspeicher auf (für alle Buffer)
  jump_smart: wechselt zum nächsten Buffer mit Aktivität (nach Priorität: highlight, Nachricht, …)
  jump_last_buffer: wechselt zum letzten Buffer
  jump_previously_visited_buffer: springt zum letzten besuchten Buffer
  jump_next_visited_buffer: springt zum nächsten besuchten Buffer
  hotlist_clear: löscht Hotliste (Aktivitätsanzeige für die Buffer)
  grab_key: fängt eine Taste
  grab_key_command: zeigt den Tastencode (inklusive des eingebundenen Befehls) einer Tastenkombination an und fügt ihn in die Befehlszeile ein
  scroll_unread: springe zur ersten ungelesenen Zeile im Buffer
  set_unread: setzt die ungelesen Markierung für alle Buffer
  set_unread_current_buffer: setzt die ungelesen Markierung für den aktuellen Buffer
  switch_active_buffer: springt zum nächsten zusammengefügten Buffer
  switch_active_buffer_previous: springt zum vorherigen zusammengefügten Buffer
  insert: fügt einen Text in die Eingabezeile ein

This command is used by key bindings or plugins.
........................................

[command]*`key`* Einer Taste einen Befehl zuordnen oder entfernen::
........................................
/key  list|listdefault|listdiff
      bind <key> [<command> [<args>]]
      unbind <key>
      reset <key>
      resetall -yes
      missing

       list: zeigt die aktuelle Tastenbelegungen an (Standardaufruf)
listdefault: zeigt die Standardeinstellung der Tastenbelegung an
   listdiff: zeigt die Unterschiede zwischen der aktuell genutzten Tastaturbelegung und der Standardbelegung an (hinzugefügte/verändert/gelöschte Tastenbelegungen)
       bind: belegt eine Taste mit einem Befehl oder zeigt an welcher Befehl auf eine Taste gelegt wurde
     unbind: hebt eine Tastenbelegung auf
      reset: die Tastenbelegung wird für die ausgewählte Taste auf die Standardeinstellung zurück gesetzt
   resetall: die Tastenbelegung wird auf die Standardeinstellungen zurück gesetzt. Dies löscht ALLE persönlichen Tastenbelegungen (Vorsicht!)
    missing: fügt fehlende Tastenbelegungen hinzu (dazu wird die Standardbelegung genutzt). Dies kann sinnvoll sein wenn man auf eine neue WeeChat Version umgestiegen ist

Falls einer Taste ein Befehl zugeordnet werden soll ist es ratsam dies mittels alt+k (oder Esc und k) zu machen um dann die Taste auszuwählen, die belegt werden soll. Durch diesen Schritt wird der entsprechende Tasten-Code in die Befehlszeile übernommen.

Beispiele:
  Mit der Tastenkombination "alt-x" kann die Nicklist-Bar an-und aus geschaltet werden:
    /key bind meta-x /bar toggle nicklist
  Mit der Tastenkombination "alt-r" wird direkt zum IRC #weechat Buffer gewechselt:
    /key bind meta-r /buffer #weechat
  Die Tastenkombination "alt-r" wird auf die Standardfunktion zurückgesetzt:
    /key reset meta-r
........................................

[command]*`layout`* Layout für Buffer und Fenster speichern, anwenden oder zurücksetzen::
........................................
/layout  save [buffers|windows]
         apply [buffers|windows]
         reset [buffers|windows]

   save: speichert das aktuelle Layout
  apply: das gespeicherte Layout anwenden
  reset: das gespeicherte Layout entfernen
buffers: speichert/verwendet nur Buffer (Reihenfolge der Buffer)
windows: speichert/verwendet nur Fenster (Buffer welche im jeweiligen Fenster dargestellt werden)

Wird der Befehl ohne Argumente aufgerufen wird das gespeicherte Layout dargestellt.
........................................

[command]*`mute`* Führt einen Befehl ohne Textausgabe aus::
........................................
/mute  [-current | -buffer <name> | -all] command

-current: Ausgabe im aktuellen Buffer wird unterdrückt
 -buffer: Ausgabe im ausgewählten Buffer wird unterdrückt
    name: vollständiger Buffername (Beispiel: "irc.server.freenode", "irc.freenode.#weechat")
    -all: Ausgabe wird in ALLEN Buffern unterdrückt
 command: Ein Befehl der ohne Textausgabe ausgeführt werden soll (das Präfix, '/', wird automatisch hinzugefügt, falls es dem Befehl nicht vorangestellt wurde)

Wird kein Buffer ausgewählt (-current, -buffer oder -all), dann wird lediglich die Textausgabe im WeeChat Core Buffer unterdrückt.

Beispiele:
  Speichern der Konfiguration:
  /mute save
  Nachricht in den aktuellen Channel senden:
  /mute -current msg * hi!
  Nachricht an den #weechat Channel senden:
  /mute -buffer irc.freenode.#weechat msg #weechat hi!
........................................

[command]*`plugin`* Erweiterungen verwalten (auflisten/installieren/deinstallieren)::
........................................
/plugin  list|listfull [<name>]
         load <filename>
         autoload
         reload|unload [<name>]

    list: installierte Erweiterungen werden aufgelistet
listfull: detaillierte Auflistung aller installierten Erweiterungen
    load: installiert eine Erweiterung
autoload: installiert automatisch alle Erweiterungen aus System- oder Benutzerverzeichnis
  reload: installiert eine Erweiterung erneut (falls kein Name angegeben wird, werden alle Erweiterungen entfernt und neu installiert)
  unload: deinstalliere eine oder alle Erweiterungen (falls kein Name angegeben wird werden alle Erweiterung entfernt)

Ohne Angabe eines Arguments werden alle installierten Erweiterungen angezeigt.
........................................

[command]*`proxy`* Proxies verwalten::
........................................
/proxy  list
        add <name> <type> <address> <port> [<username> [<password>]]
        del <name>|-all
        set <name> <option> <value>

         list: listet alle Proxies auf
          add: fügt neuen Proxy hinzu
    name: Name des neuen Proxy (der Name darf nur einmal genutzt werden)
         type: http, socks4 oder socks5
      address: IP oder Hostname
         port: Port
     username: Username (optional)
     password: Passwort (optional)
          del: entfernt einen Proxy (-all um alle Proxies zu entfernen)
          set: setzt einen Wert für Proxy
       option: Optionen die geändert werden (für eine Liste der möglichen Optionen, bitte folgenden Befehl nutzen: /set weechat.proxy.<proxyname>.*)
        value: neuer Wert für Option

Beispiele:
  erstellt einen HTTP-Proxy, der auf einem lokalen Host läuft und den Port 8888 nutzt:
    /proxy add local http 127.0.0.1 8888
  erstellt einen HTTP-Proxy der das IPv6 Protokoll nutzt:
    /proxy add local http 127.0.0.1 8888
    /proxy set local ipv6 on
  erstellt einen socks5-Proxy, mit Username und Passwort:
    /proxy add myproxy socks5 sample.host.org 3128 myuser mypass
  entferne einen Proxy:
    /proxy del myproxy
........................................

[command]*`quit`* WeeChat beenden::
........................................
/quit  [-yes] [<arguments>]

     -yes: Option muß genutzt werden falls weechat.look.confirm_quit aktiviert sein sollte
arguments: Text der beim Signal "quit" verschickt wird
           (zum Beispiel sendet die IRC Erweiterung diesen Text als Quit-Nachricht an den Server)
........................................

[command]*`reload`* Konfiguration neu laden::
........................................
/reload  [<file> [<file>...]]

file: Konfigurationsdatei die erneut geladen werden soll (ohne Dateinamenserweiterung ".conf")

Ohne Angabe von Argumenten werden alle Konfigurationen (WeeChat und Erweiterungen) neu geladen.
........................................

[command]*`save`* Konfiguration abspeichern::
........................................
/save  [<file> [<file>...]]

file: Konfigurationsdatei die gesichert werden soll (ohne Dateinamenserweiterung ".conf")

Wird keine Datei angegeben dann werden alle Konfigurationen (WeeChat und Erweiterungen) gesichert.
........................................

[command]*`set`* Konfigurationsparameter setzen::
........................................
/set  [<option> [<value>]]

option: Name der zu ändernden Option (darf mit einem Joker '*' beginnen oder enden um mehrere Optionen anzuzeigen)
 value: neuer Wert, den die Option erhalten soll

Abhängig von der ausgewählten Option, kann die Variable folgenden Inhalt haben:
  boolean: on, off oder toggle
  integer: Anzahl, ++Anzahl oder --Anzahl
  string : jede Zeichenkette ("" für eine leere Zeichenkette)
  color  : Name einer Farbe, ++Anzahl oder --Anzahl

Für alle Typen von Variablen kann die Zeichenkette "null" (ohne "")  genutzt werden um den Wert der Option zu löschen (undefinierter Wert). Dies  kann nur bei einigen Erweiterungen genutzt werden.

Beispiele:
  Zeigt alle Optionen an die etwas mit highlight zu tun haben:
    /set *highlight*
  Fügt ein highlight-Wort hinzu:
    /set weechat.look.highlight "word"
........................................

[command]*`unset`* Konfigurationsparameter freigeben/zurücksetzen::
........................................
/unset  <option>

option: Name einer Option (darf mit Joker "*" beginnen oder enden um mehrere Optionen zurückzusetzen. Nutzen Sie diese Funktion mit äußerster Sorgfalt!)

Gemäß der jeweiligen Option wird diese zurückgesetzt (bei Standard-Optionen) oder komplett entfernt (bei optionalen Einstellungen, zum Beispiel die Server-Einstellungen).

Beispiele:
  Eine Option zurücksetzen:
    /unset weechat.look.item_time_format
  Alle Farboptionen zurücksetzen:
    /unset weechat.color.*
........................................

[command]*`upgrade`* Aktualisiert WeeChat ohne die Verbindung zum Server zu trennen::
........................................
/upgrade  [<path_to_binary>]

path_to_binary: Pfad zu einer ausführbaren WeeChat Version (Standardeinstellung ist die aktuell ausführbare Datei)

Dieser Befehl startet eine weitere WeeChat-Binärdatei. Aus diesem Grund muss diese kompiliert oder mit einem Paketmanager installiert sein bevor der Befehl ausgeführt wird.

Der Upgrade Vorgang besteht aus vier Schritten:
  1. Speicherung der Session in Dateien für Core und Erweiterungen (buffers, history, ..)
  2. alle Erweiterungen werden ausgeschaltet (Konfigurationen *.conf werden gesichert)
  3. Speicherung der WeeChat Konfiguration (weechat.conf)
  4. ausführen einer neuen WeeChat Session.
........................................

[command]*`uptime`* Zeigt die Uptime von Weechat an::
........................................
/uptime  [-o | -ol]

 -o: sendet die WeeChat Laufzeit in den aktuellen Buffer (englisch)
-ol: sendet die WeeChat Laufzeit in den aktuellen Buffer (in der voreingestellten Landessprache)
........................................

[command]*`version`* Zeigt die WeeChat-Version und das Datum der Kompilierung an::
........................................
/version  [-o | -ol]

 -o: sendet die WeeChat Version in den aktuellen Buffer (englisch)
-ol: sendet die WeeChat Version in den aktuellen Buffer (in der Voreingestellten Landessprache)
........................................

[command]*`wait`* Terminiere einen Befehl der ausgeführt werden soll::
........................................
/wait  <number>[<unit>] <command>

 number: die Zeit, die gewartet werden soll (dies muss eine natürlich Zahl sein)
   unit: mögliche Werte (optional):
           ms: Millisekunden
            s: Sekunden (Vorgabewert)
            m: Minuten
            h: Stunden
command: Befehl der ausgeführt werden soll (ohne das führende '/') oder ein Text der in dem Buffer ausgegeben werden soll

Hinweis: Der Befehl der Zeit verzögert gestartet werden soll wird im selben Buffer ausgeführt in dem auch der /wait  Befehl aufgerufen wurde. Falls der Buffer nicht gefunden werden kann,  da er in der Zwischenzeit zum Beispiel geschlossen wurde, wird der Befehl im WeeChat Core-Buffer ausgeführt.

Beispiele:
  Betritt nach 10 Sekunden den Channel #test:
  /wait 10 /join #test
  Setzt nach 15 Minuten eine globale Abwesenheit:
  /wait 15m /away -all Bin dann mal eben weg
  Versendet nach zwei Minuten den Text 'Hallo':
  /wait 2m Hallo
........................................

[command]*`window`* Fenster verwalten::
........................................
/window  list
         -1|+1|b#|up|down|left|right
         splith|splitv [<pct>]
         resize [+/-]<pct>
         merge [all]
         page_up|page_down
         refresh
         scroll|scroll_up|scroll_down|scroll_top|scroll_bottom|scroll_previous_highlight|scroll_next_highlight
         zoom

         list: listet die geöffneten Fenster (ohne Angabe von Parametern wird diese Funktion aufgerufen)
           -1: springt zum vorherigen Fenster
           +1: springt zum nächsten Fenster
           b#: springt zum nächsten Fenster, welches die Buffer Nummer # besitzt
           up: wechselt zum Fenster über dem aktuellen
         down: wechselt zum Fenster unter dem aktuellen
         left: wechselt zum linken Fenster
        right: wechselt zum rechten Fenster
       splith: teilt das aktuelle Fenster horizontal
       splitv: teilt das aktuelle Fenster vertikal
       resize: verändert die Größe des aktuellen Fensters. Die neue Größe des Fensters ist prozentual <pct> zum Stammfensters groß
        merge: vereinigt Fenster miteinander (all = alle Fenster vereinigen)
      page_up: Scrollt eine Seite nach oben
    page_down: Scrollt eine Seite nach unten
      refresh: Seite wird neu aufgebaut
       scroll: Scrollt eine Anzahl an Zeilen (+/-N) oder zu einer gewissen Zeit: s=Sekunden, m=Minuten, h=Stunden, d=Tage, M=Monate, y=Jahre
    scroll_up: Scrollt ein paar Zeilen nach oben
  scroll_down: Scrollt ein paar Zeilen nach unten
   scroll_top: Scrollt zum Anfang des Buffers
scroll_bottom: Scrollt zum Ende des  Buffers
scroll_previous_highlight: Scrollt zum vorherigen Hightlight
scroll_next_highlight: Scrollt zum nächsten Highlight
         zoom: vergrößert auf Fenster

Bei splith und splitv gibt "pct" die neue Größe des Fensters im Verhältnis zur aktuellen Größe an. Zum Beispiel würde der Wert 25 bedeuten, dass das neue Fenster nur noch ein Viertel der Größe des alten Fensters hat.

Beispiele:
  Springt zum Fenster mit dem Buffer #1:
    /window b1
   Scrollt zwei Zeilen hoch:
    /window scroll -2
  Scrollt zwei Tage hoch: /window scroll -2d
    /window scroll -2d
  Scrollt zum Beginn des aktuellen Tages:
    /window scroll -d
........................................

