[[command_weechat_away]]
[command]*`away`* Abwesenheitsstatus ein-/ausschalten::
........................................
/away  [-all] [<message>]

   -all: Abwesenheitszustand auf allen Servern ändern
message: Abwesenheitsnachricht (ohne eine Nachricht wird der Abwesenheitszustand deaktivieren)
........................................

[[command_weechat_bar]]
[command]*`bar`* Infobars verwalten::
........................................
/bar  list|listfull|listitems
      add <name> <type>[,<cond1>[,<cond2>...]] <position> <size> <separator> <item1>[,<item2>...]
      default [input|title|status|nicklist]
      del <name>|-all
      set <name> <option> <value>
      hide|show|toggle <name>
      scroll <name> <window> <scroll_value>

         list: list all bars
     listfull: list all bars (verbose)
    listitems: list all bar items
          add: add a new bar
         name: name of bar (must be unique)
         type:   root: outside windows,
               window: inside windows, with optional conditions (see below)
    cond1,...: condition(s) for displaying bar (only for type "window"):
                 active: on active window
               inactive: on inactive windows
               nicklist: on windows with nicklist
               without condition, bar is always displayed
     position: bottom, top, left or right
         size: size of bar (in chars)
    separator: 1 for using separator (line), 0 or nothing means no separator
    item1,...: items for this bar (items can be separated by comma (space between items) or "+" (glued items))
      default: create a default bar (all default bars if no bar name is given)
          del: delete a bar (or all bars with -all)
          set: set a value for a bar property
       option: option to change (for options list, look at /set weechat.bar.<barname>.*)
        value: new value for option
         hide: hide a bar
         show: show an hidden bar
       toggle: hide/show a bar
       scroll: scroll bar
       window: window number (use '*' for current window or for root bars)
 scroll_value: value for scroll: 'x' or 'y' (optional), followed by '+', '-', 'b' (beginning) or 'e' (end), value (for +/-), and optional % (to scroll by % of width/height, otherwise value is number of chars)

Examples:
  create a bar with time, buffer number + name, and completion:
    /bar add mybar root bottom 1 0 [time],buffer_number+:+buffer_name,completion
  hide a bar:
    /bar hide mybar
  scroll nicklist 10 lines down on current buffer:
    /bar scroll nicklist * y+10
  scroll nicklist one page up on #weechat buffer:
    /bar scroll nicklist #weechat y-100%
  scroll to end of nicklist on current buffer:
    /bar scroll nicklist * ye
........................................

[[command_weechat_buffer]]
[command]*`buffer`* Buffer verwalten::
........................................
/buffer  list
         clear [<number>|-merged|-all]
         move|merge <number>
         unmerge [<number>|-all]
         close [<n1>[-<n2>]|<name>]
         notify <level>
         localvar
         set <property> <value>
         get <property>
         <number>|<name>

    list: list buffers (without argument, this list is displayed)
   clear: clear buffer content (number for a buffer, -merged for merged buffers, -all for all buffers, or nothing for current buffer)
    move: move buffer in the list (may be relative, for example -1)
   merge: merge current buffer to another buffer (chat area will be mix of both buffers)
          (by default ctrl-x switches between merged buffers)
 unmerge: unmerge buffer from other buffers which have same number
   close: close buffer (number/range or name is optional)
  notify: set notify level for current buffer: this level determines whether buffer will be added to hotlist or not:
               none: never
          highlight: for highlights only
            message: for messages from users + highlights
                all: all messages
              reset: reset to default value (all)
localvar: display local variables for current buffer
     set: set a property for current buffer
     get: display a property of current buffer
  number: jump to buffer by number, possible prefix:
          '+': relative jump, add number to current
          '-': relative jump, sub number to current
          '*': jump to number, using option "weechat.look.jump_current_to_previous_buffer"
    name: jump to buffer by (partial) name

Examples:
  clear current buffer:
    /buffer clear
  move buffer to number 5:
    /buffer move 5
  merge with core buffer:
    /buffer merge 1
  unmerge buffer:
    /buffer unmerge
  close current buffer:
    /buffer close
  close buffers 5 to 7:
    /buffer close 5-7
  jump to #weechat:
    /buffer #weechat
  jump to next buffer:
    /buffer +1
........................................

[[command_weechat_color]]
[command]*`color`* definiert Farbaliase und stellt eine Palette der möglichen Farben dar::
........................................
/color  alias <color> <name>
        unalias <color>
        reset

  alias: add an alias for a color
unalias: delete an alias
  color: color number (greater than or equal to 0, max depends on terminal, commonly 63 or 255)
   name: alias name for color (for example: "orange")
  reset: reset all color pairs (required when no more color pairs are available if automatic reset is disabled, see option weechat.look.color_pairs_auto_reset)

Without argument, this command displays colors in a new buffer.

Examples:
  add alias "orange" for color 214:
    /color alias 214 orange
  delete color 214:
    /color unalias 214
........................................

[[command_weechat_command]]
[command]*`command`* führe explizit einen WeeChat Befehl oder eine Erweiterung aus::
........................................
/command  <plugin> <command>

Erweiterung: Name der Erweiterung ('weechat' für interne WeeChat Befehle)
    Befehl: auszuführender Befehl (es wird automatisch ein '/' vorangestellt, falls dieser nicht angegeben wurde)
........................................

[[command_weechat_cursor]]
[command]*`cursor`* free movement of cursor on screen to execute actions on specific areas of screen::
........................................
/cursor  go chat|<bar>|<x>,<y>
         move up|down|left|right|area_up|area_down|area_left|area_right
         stop

  go: move cursor to chat area, a bar (using bar name) or coordinates "x,y"
move: move cursor with direction
stop: stop cursor mode

Without argument, this command toggles cursor mode.

When mouse is enabled (see /help mouse), by default a middle click will start cursor mode at this point.

Examples:
  go to nicklist:
    /cursor go nicklist
  go to coordinates x=10, y=5:
    /cursor go 10,5
........................................

[[command_weechat_debug]]
[command]*`debug`* Debug-Kontrolle für Hauptprogramm und/oder Erweiterung::
........................................
/debug  list
        set <plugin> <level>
        dump [<plugin>]
        buffer|color|cursor|infolists|memory|mouse|tags|term|windows
        hdata [free]

     list: list plugins with debug levels
      set: set debug level for plugin
   plugin: name of plugin ("core" for WeeChat core)
    level: debug level for plugin (0 = disable debug)
     dump: save memory dump in WeeChat log file (same dump is written when WeeChat crashes)
   buffer: dump buffer content with hexadecimal values in log file
    color: display infos about current color pairs
   cursor: toggle debug for cursor mode
    hdata: display infos about hdata (with free: remove all hdata in memory)
infolists: display infos about infolists
   memory: display infos about memory usage
    mouse: toggle debug for mouse
     tags: display tags for lines
     term: display infos about terminal
  windows: display windows tree
........................................

[[command_weechat_filter]]
[command]*`filter`* Filterfunktion um Nachrichten in Buffern zu aus- oder einzublenden, dazu können Tags oder regulären Ausdrücken verwendet werden::
........................................
/filter  list
         enable|disable|toggle [<name>]
         add <name> <buffer>[,<buffer>...] <tags> <regex>
         del <name>|-all

   list: alle Filter auflisten
 enable: Filter wird aktiviert (Filter werden standardmässig aktiviert)
disable: Filter deaktivieren
 toggle: Filter de-/aktivieren
   name: Name des Filters
    add: Filter hinzufügen
    del: Filter entfernen
   -all: entfernt alle Filter
 buffer: durch Kommata getrennte Liste von Buffern in denen der Filter aktiv sein soll:
         - ist der vollständige Name eines Buffers inklusive seiner Erweiterung (Beispiel: "irc.freenode.#weechat")
         - "*" bedeutet alle Buffer
         - beginnt ein Name mit '!' wird für diesen Buffer kein Filter genutzt
         - ein Name darf mit '*' beginnen oder enden um mehrere Buffer auszuwählen
   tags: durch Kommata  getrennte Liste mit Tags. Zum Beispiel: "irc_join,irc_part,irc_quit"
        regex: regulärer Ausdruck um in einer Zeile zu suchen
               - das Präfix (z.B. Nick) wird mittels '\t' von der Nachricht getrennt. Sonderzeichen wie '|' müssen mit einer Escapesequenz : '\|' eingebunden werden)
               - wird ein regulärer Ausdruck mit '!' eingeleitet dann wird das übereinstimmende Ergebnis umgekehrt  (nutze '\!' um mit '!' zu beginnen)
               - es werden zwei reguläre Ausdrücke erstellt: Der erste für den Präfix und der zweite für die eigentliche Nachricht

Die Tastenvoreinstellung alt+'=' schaltet die Filterfunktion an/aus.

Die am häufigsten gebrauchten Tags lauten:
  no_filter, no_highlight, no_log, log0..log9 (log Level),
  notify_none, notify_message, notify_private, notify_highlight,
  nick_xxx (xxx ist durch den Nicknamen zu ersetzen),
  irc_xxx (xxx ist durch einen IRC-Befehl/-Nummer zu ersetzen, siehe /server raw)
  irc_numeric, irc_error, irc_action, irc_ctcp, irc_ctcp_reply, irc_smart_filter, away_info.
Um sich die Tags jeder einzelnen Zeile darstellen zu lassen: /debug tags

Beispiele:
  aktiviert einen einfachen IRC Filter für join/part/quit/nick Nachrichten für alle Buffer:
    /filter add irc_smart * irc_smart_filter *
  aktiviert einen einfachen IRC Filter für join/part/quit/nick Nachrichten der für alle Buffer genutzt wird, außer Buffer die "#weechat" im Namen tragen:
    /filter add irc_smart *,!*#weechat* irc_smart_filter *
  filtert alle IRC join/part/quit Nachrichten:
    /filter add joinquit * irc_join,irc_part,irc_quit *
  filtert Nicks wenn diese den Channel betreten oder durch den Befehl "/names:" angezeigt werden:
    /filter add nicks * irc_366 *
  filtert Nick "toto" im IRC Channel #weechat:
    /filter add toto irc.freenode.#weechat * toto\t
  nur der Nick "tutu" wird im IRC Channel #test angezeigt:
    /filter add tutu irc.freenode.#test * !tutu\t
  filtert Zeilen die das Wort "spam" enthalten:
    /filter add filterspam * * spam
  filtert Zeilen die "weechat sucks" im IRC Channel #weechat enthalten:
    /filter add sucks irc.freenode.#weechat * weechat sucks
........................................

[[command_weechat_help]]
[command]*`help`* Zeigt einen Hilfstext für Befehle und Optionen an::
........................................
/help  -list|-listfull [<plugin> [<plugin>...]]
       <command>
       <option>

    -list: zeigt alle Befehle, nach Erweiterungen sortiert (ohne Angabe von Argumente wird diese Liste ausgegeben)
-listfull: zeigt alle Befehle mit Beschreibung, nach Erweiterung
   plugin: zeigt Befehle explizit für diese Erweiterung an
  command: Name eines Befehls
   option: Name einer Option (nutze /set um Optionen anzeigen zu lassen)
........................................

[[command_weechat_history]]
[command]*`history`* Zeigt den Befehlsverlauf des Buffers::
........................................
/history  clear
          <value>

clear: löscht den Befehlsverlauf
value: Anzahl der gewünschten Einträgen im Befehlsverlauf anzeigen
........................................

[[command_weechat_input]]
[command]*`input`* Funktionen für die Befehlszeile::
........................................
/input  <action> [<arguments>]

list of actions:
  return: simulate key "enter"
  complete_next: complete word with next completion
  complete_previous: complete word with previous completion
  search_text: search text in buffer
  search_switch_case: switch exact case for search
  search_previous: search previous line
  search_next: search next line
  search_stop: stop search
  delete_previous_char: delete previous char
  delete_next_char: delete next char
  delete_previous_word: delete previous word
  delete_next_word: delete next word
  delete_beginning_of_line: delete from beginning of line until cursor
  delete_end_of_line: delete from cursor until end of line
  delete_line: delete entire line
  clipboard_paste: paste from clipboard
  transpose_chars: transpose two chars
  undo: undo last command line action
  redo: redo last command line action
  move_beginning_of_line: move cursor to beginning of line
  move_end_of_line: move cursor to end of line
  move_previous_char: move cursor to previous char
  move_next_char: move cursor to next char
  move_previous_word: move cursor to previous word
  move_next_word: move cursor to next word
  history_previous: recall previous command in current buffer history
  history_next: recall next command in current buffer history
  history_global_previous: recall previous command in global history
  history_global_next: recall next command in global history
  jump_smart: jump to next buffer with activity
  jump_last_buffer: jump to last buffer
  jump_previously_visited_buffer: jump to previously visited buffer
  jump_next_visited_buffer: jump to next visited buffer
  hotlist_clear: clear hotlist
  grab_key: grab a key (optional argument: delay for end of grab, default is 500 milliseconds)
  grab_key_command: grab a key with its associated command (optional argument: delay for end of grab, default is 500 milliseconds)
  grab_mouse: grab mouse event code
  grab_mouse_area: grab mouse event code with area
  scroll_unread: scroll to unread marker
  set_unread: set unread marker for all buffers
  set_unread_current_buffer: set unread marker for current buffer
  switch_active_buffer: switch to next merged buffer
  switch_active_buffer_previous: switch to previous merged buffer
  insert: insert text in command line

This command is used by key bindings or plugins.
........................................

[[command_weechat_key]]
[command]*`key`* Einer Taste einen Befehl zuordnen oder entfernen::
........................................
/key  list|listdefault|listdiff [<context>]
      bind <key> [<command> [<args>]]
      bindctxt <context> <key> [<command> [<args>]]
      unbind <key>
      unbindctxt <context> <key>
      reset <key>
      resetctxt <context> <key>
      resetall -yes [<context>]
      missing [<context>]

       list: list all current keys (without argument, this list is displayed)
listdefault: list default keys
   listdiff: list differences between current and default keys (keys added, redefined or deleted)
    context: name of context ("default" or "search")
       bind: bind a command to a key or display command bound to key (for context "default")
   bindctxt: bind a command to a key or display command bound to key, for given context
     unbind: remove a key binding (for context "default")
 unbindctxt: remove a key binding for given context
      reset: reset a key to default binding (for context "default")
  resetctxt: reset a key to default binding, for given context
   resetall: restore bindings to the default values and delete ALL personal bindings (use carefully!)
    missing: add missing keys (using default bindings), useful after installing new WeeChat version

When binding a command to a key, it is recommended to use key alt+k (or Esc then k), and then press the key to bind: this will insert key code in command line.

For context "mouse" (possible in context "cursor" too), key has format: "@area:key" where area can be:
          *: any area on screen
       chat: chat area
     bar(*): any bar
   bar(xxx): bar "xxx"
    item(*): any bar item
  item(xxx): bar item "xxx"
The key can start or end with '*' to match many mouse events.

Examples:
  key alt-x to toggle nicklist bar:
    /key bind meta-x /bar toggle nicklist
  key alt-r to jump to #weechat IRC channel:
    /key bind meta-r /buffer #weechat
  restore default binding for key alt-r:
    /key reset meta-r
  key "tab" to stop search in buffer:
    /key bindctxt search ctrl-I /input search_stop
  middle button of mouse on a nick to retrieve info on nick:
    /key bindctxt mouse @item(buffer_nicklist):button3 /msg nickserv info ${nick}
........................................

[[command_weechat_layout]]
[command]*`layout`* Layout für Buffer und Fenster speichern, anwenden oder zurücksetzen::
........................................
/layout  save [buffers|windows]
         apply [buffers|windows]
         reset [buffers|windows]

   save: speichert das aktuelle Layout
  apply: das gespeicherte Layout anwenden
  reset: das gespeicherte Layout entfernen
buffers: speichert/verwendet nur Buffer (Reihenfolge der Buffer)
windows: speichert/verwendet nur Fenster (Buffer welche im jeweiligen Fenster dargestellt werden)

Wird der Befehl ohne Argumente aufgerufen wird das gespeicherte Layout dargestellt.
........................................

[[command_weechat_mouse]]
[command]*`mouse`* mouse control::
........................................
/mouse  enable|disable|toggle [<delay>]

 enable: enable mouse
disable: disable mouse
 toggle: toggle mouse
  delay: delay (in seconds) after which initial mouse state is restored (useful to temporarily disable mouse)

To enable/disable mouse at startup, use:
  /set weechat.look.mouse on/off

Examples:
  enable mouse:
    /mouse enable
  toggle mouse for 5 seconds:
    /mouse toggle 5
........................................

[[command_weechat_mute]]
[command]*`mute`* Führt einen Befehl ohne Textausgabe aus::
........................................
/mute  [-current | -buffer <name> | -all] command

-current: Ausgabe im aktuellen Buffer wird unterdrückt
 -buffer: Ausgabe im ausgewählten Buffer wird unterdrückt
    name: vollständiger Buffername (Beispiel: "irc.server.freenode", "irc.freenode.#weechat")
    -all: Ausgabe wird in ALLEN Buffern unterdrückt
 command: Ein Befehl der ohne Textausgabe ausgeführt werden soll (das Präfix, '/', wird automatisch hinzugefügt, falls es dem Befehl nicht vorangestellt wurde)

Wird kein Buffer ausgewählt (-current, -buffer oder -all), dann wird lediglich die Textausgabe im WeeChat Core Buffer unterdrückt.

Beispiele:
  Speichern der Konfiguration:
  /mute save
  Nachricht in den aktuellen Channel senden:
  /mute -current msg * hi!
  Nachricht an den #weechat Channel senden:
  /mute -buffer irc.freenode.#weechat msg #weechat hi!
........................................

[[command_weechat_plugin]]
[command]*`plugin`* Erweiterungen verwalten (auflisten/installieren/deinstallieren)::
........................................
/plugin  list|listfull [<name>]
         load <filename>
         autoload
         reload|unload [<name>]

    list: installierte Erweiterungen werden aufgelistet
listfull: detaillierte Auflistung aller installierten Erweiterungen
    load: installiert eine Erweiterung
autoload: installiert automatisch alle Erweiterungen aus dem System- oder Benutzerverzeichnis
  reload: installiert eine Erweiterung erneut (falls kein Name angegeben wird, werden alle Erweiterungen entfernt und neu installiert)
  unload: deinstalliere eine oder alle Erweiterungen (wird kein Name angegeben dann werden alle Erweiterung entfernt)
filename: Erweiterung (Datei) welche installiert werden soll
    name: Name einer Erweiterung

Ohne Angabe eines Arguments werden alle installierten Erweiterungen angezeigt.
........................................

[[command_weechat_proxy]]
[command]*`proxy`* Proxies verwalten::
........................................
/proxy  list
        add <name> <type> <address> <port> [<username> [<password>]]
        del <name>|-all
        set <name> <option> <value>

         list: listet alle Proxies auf
          add: fügt neuen Proxy hinzu
    name: Name des neuen Proxy (der Name darf nur einmal genutzt werden)
         type: http, socks4 oder socks5
      address: IP oder Hostname
         port: Port
     username: Username (optional)
     password: Passwort (optional)
          del: entfernt einen Proxy (-all um alle Proxies zu entfernen)
          set: setzt einen Wert für Proxy
       option: Optionen die geändert werden (für eine Liste der möglichen Optionen, bitte folgenden Befehl nutzen: /set weechat.proxy.<proxyname>.*)
        value: neuer Wert für Option

Beispiele:
  erstellt einen HTTP-Proxy, der auf einem lokalen Host läuft und den Port 8888 nutzt:
    /proxy add local http 127.0.0.1 8888
  erstellt einen HTTP-Proxy der das IPv6 Protokoll nutzt:
    /proxy add local http 127.0.0.1 8888
    /proxy set local ipv6 on
  erstellt einen socks5-Proxy, mit Username und Passwort:
    /proxy add myproxy socks5 sample.host.org 3128 myuser mypass
  entferne einen Proxy:
    /proxy del myproxy
........................................

[[command_weechat_quit]]
[command]*`quit`* WeeChat beenden::
........................................
/quit  [-yes] [<arguments>]

     -yes: Option muß genutzt werden falls weechat.look.confirm_quit aktiviert sein sollte
arguments: Text der beim Signal "quit" verschickt wird
           (zum Beispiel sendet die IRC Erweiterung diesen Text als Quit-Nachricht an den Server)
........................................

[[command_weechat_reload]]
[command]*`reload`* Konfiguration neu laden::
........................................
/reload  [<file> [<file>...]]

file: Konfigurationsdatei die erneut geladen werden soll (ohne Dateinamenserweiterung ".conf")

Ohne Angabe von Argumenten werden alle Konfigurationen (WeeChat und Erweiterungen) neu geladen.
........................................

[[command_weechat_save]]
[command]*`save`* Konfiguration abspeichern::
........................................
/save  [<file> [<file>...]]

file: Konfigurationsdatei die gesichert werden soll (ohne Dateinamenserweiterung ".conf")

Wird keine Datei angegeben dann werden alle Konfigurationen (WeeChat und Erweiterungen) gesichert.
........................................

[[command_weechat_set]]
[command]*`set`* Konfigurationsparameter setzen::
........................................
/set  [<option> [<value>]]

option: Name der zu ändernden Option (darf mit einem Joker '*' beginnen oder enden um mehrere Optionen anzuzeigen)
 value: neuer Wert, den die Option erhalten soll

Abhängig von der ausgewählten Option, kann die Variable folgenden Inhalt haben:
  boolean: on, off oder toggle
  integer: Anzahl, ++Anzahl oder --Anzahl
  string : jede Zeichenkette ("" für eine leere Zeichenkette)
  color  : Name einer Farbe, ++Anzahl oder --Anzahl

Für alle Typen von Variablen kann die Zeichenkette "null" (ohne "")  genutzt werden um den Wert der Option zu löschen (undefinierter Wert). Dies  kann nur bei einigen Erweiterungen genutzt werden.

Beispiele:
  Zeigt alle Optionen an die etwas mit highlight zu tun haben:
    /set *highlight*
  Fügt ein highlight-Wort hinzu:
    /set weechat.look.highlight "word"
........................................

[[command_weechat_unset]]
[command]*`unset`* Konfigurationsparameter freigeben/zurücksetzen::
........................................
/unset  <option>

option: Name einer Option (darf mit Joker "*" beginnen oder enden um mehrere Optionen zurückzusetzen. Nutzen Sie diese Funktion mit äußerster Sorgfalt!)

Gemäß der jeweiligen Option wird diese zurückgesetzt (bei Standard-Optionen) oder komplett entfernt (bei optionalen Einstellungen, zum Beispiel die Server-Einstellungen).

Beispiele:
  Eine Option zurücksetzen:
    /unset weechat.look.item_time_format
  Alle Farboptionen zurücksetzen:
    /unset weechat.color.*
........................................

[[command_weechat_upgrade]]
[command]*`upgrade`* Aktualisiert WeeChat ohne die Verbindung zum Server zu trennen::
........................................
/upgrade  [<path_to_binary>]

path_to_binary: path to WeeChat binary (default is current binary)

This command run again a WeeChat binary, so it should have been compiled or installed with a package manager before running this command.

Note: SSL connections are lost during upgrade, because reload of SSL sessions is currently not possible with GnuTLS. There is automatic reconnection after upgrade.

Upgrade process has 4 steps:
  1. save session into files for core and plugins (buffers, history, ..)
  2. unload all plugins (configuration files (*.conf) are written on disk)
  3. save WeeChat configuration (weechat.conf)
  4. execute new WeeChat binary and reload session.
........................................

[[command_weechat_uptime]]
[command]*`uptime`* Zeigt die Uptime von Weechat an::
........................................
/uptime  [-o | -ol]

 -o: sendet die WeeChat Laufzeit in den aktuellen Buffer (englisch)
-ol: sendet die WeeChat Laufzeit in den aktuellen Buffer (in der voreingestellten Landessprache)
........................................

[[command_weechat_version]]
[command]*`version`* Zeigt die WeeChat-Version und das Datum der Kompilierung an::
........................................
/version  [-o | -ol]

 -o: sendet die WeeChat Version in den aktuellen Buffer (englisch)
-ol: sendet die WeeChat Version in den aktuellen Buffer (in der Voreingestellten Landessprache)
........................................

[[command_weechat_wait]]
[command]*`wait`* Terminiere einen Befehl der ausgeführt werden soll::
........................................
/wait  <number>[<unit>] <command>

 number: die Zeit, die gewartet werden soll (dies muss eine natürlich Zahl sein)
   unit: mögliche Werte (optional):
           ms: Millisekunden
            s: Sekunden (Vorgabewert)
            m: Minuten
            h: Stunden
command: Befehl der ausgeführt werden soll (ohne das führende '/') oder ein Text der in dem Buffer ausgegeben werden soll

Hinweis: Der Befehl der Zeit verzögert gestartet werden soll wird im selben Buffer ausgeführt in dem auch der /wait  Befehl aufgerufen wurde. Falls der Buffer nicht gefunden werden kann,  da er in der Zwischenzeit zum Beispiel geschlossen wurde, wird der Befehl im WeeChat Core-Buffer ausgeführt.

Beispiele:
  Betritt nach 10 Sekunden den Channel #test:
  /wait 10 /join #test
  Setzt nach 15 Minuten eine globale Abwesenheit:
  /wait 15m /away -all Bin dann mal eben weg
  Versendet nach zwei Minuten den Text 'Hallo':
  /wait 2m Hallo
........................................

[[command_weechat_window]]
[command]*`window`* Fenster verwalten::
........................................
/window  list
         -1|+1|b#|up|down|left|right [-window <number>]
         <number>
         splith|splitv [-window <number>] [<pct>]
         resize [-window <number>] [+/-]<pct>
         balance
         merge [-window <number>] [all]
         page_up|page_down [-window <number>]
         refresh
         scroll [-window <number>] [+/-]<value>[s|m|h|d|M|y]
         scroll_horiz [-window <number>] [+/-]<value>[%]
         scroll_up|scroll_down|scroll_top|scroll_bottom|scroll_previous_highlight|scroll_next_highlight [-window <number>]
         swap [-window <number>] [up|down|left|right]
         zoom[-window <number>]

         list: list opened windows (without argument, this list is displayed)
           -1: jump to previous window
           +1: jump to next window
           b#: jump to next window displaying buffer number #
           up: switch to window above current one
         down: switch to window below current one
         left: switch to window on the left
        right: switch to window on the right
       number: window number (see /window list)
       splith: split current window horizontally
       splitv: split current window vertically
       resize: resize window size, new size is <pct> percentage of parent window
      balance: balance the sizes of all windows
        merge: merge window with another (all = keep only one window)
      page_up: scroll one page up
    page_down: scroll one page down
      refresh: refresh screen
       scroll: scroll a number of lines (+/-N) or with time: s=seconds, m=minutes, h=hours, d=days, M=months, y=years
 scroll_horiz: scroll horizontally a number of columns (+/-N) or percentage of window size (this scrolling is possible only on buffers with free content)
    scroll_up: scroll a few lines up
  scroll_down: scroll a few lines down
   scroll_top: scroll to top of buffer
scroll_bottom: scroll to bottom of buffer
scroll_previous_highlight: scroll to previous highlight
scroll_next_highlight: scroll to next highlight
         swap: swap buffers of two windows (with optional direction for target window)
         zoom: zoom on window

For splith and splitv, pct is a percentage which represents size of new window, computed with current window as size reference. For example 25 means create a new window with size = current_size / 4

Examples:
  jump to window displaying buffer #1:
    /window b1
  scroll 2 lines up:
    /window scroll -2
  scroll 2 days up:
    /window scroll -2d
  scroll to beginning of current day:
    /window scroll -d
  zoom on window #2:
    /window zoom -window 2
........................................

