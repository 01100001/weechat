[[command_weechat_away]]
[command]*`away`* ustawia lub kasuje status nieobecności::

----
/away  [-all] [<wiadomość>]

   -all: ustawia lub kasuje stan nieobecności na wszystkich połączonych serwerach
wiadomość: powód nieobecności (jeśli nie podano wiadomości status nieobecności zostaje usunięty)
----

[[command_weechat_bar]]
[command]*`bar`* zarządzaj paskami::

----
/bar  list|listfull|listitems
      add <nazwa> <typ>[,<warunek>] <pozycja> <rozmiar> <separator> <element1>[,<element2>...]
      default [input|title|status|nicklist]
      del <nazwa>|-all
      set <nazwa> <opcja> <wartość>
      hide|show|toggle <nazwa>
      scroll <nazwa> <okno> <wartość_przewinięcia>

         list: lista wszystkich pasków
     listfull: lista wszystkich pasków (z polami)
    listitems: lista wszystkich elementów pasków
          add: dodaj nowy pasek
         nazwa: nazwa paska (musi być unikalna)
         typ:   root: poza oknami,
               window: wewnątrz okien, z opcjonalnymi warunkami (patrz niżej)
    warunek: warunek(i) dla wyświetlenia paska (tylko dla typu "window"):
                 active: w aktywnym oknie
               inactive: w nieaktywnym oknie
               nicklist: w oknach z listą nicków
               inne warunki: zobacz /help weechat.bar.xxx.conditions oraz /help eval
               bez warunku pasek jest zawsze wyświetlany
     pozycja: dół (bottom), góra (top), lewo (left) lub prawo (right)
         rozmiar: rozmiar paska (w znakach)
    separator: 1 dla użycia separatora (linia), 0  - brak separatora
    element1,...: elementy dla tego paska (elementy mogą być oddzielone przecinkiem (przerwa między elementami) lub "+" (sklejone elementy))
      default: tworzy domyślne paski (wszystkie domyślne paski, jeśli nie podamy nazwy)
          del: usuwa pasek (lub wszystkie z użyciem -all)
          set: ustawia wartość dla właściwości paska
       opcja: opcja do zmiany (listę opcji można zobaczyć dzięki /set weechat.bar.<nazwa paska>.*)
        wartość: nowa wartość opcji
         hide: ukrywa pasek
         show: pokazuje ukryty pasek
       toggle: ukrywa/pokazuje pasek
       scroll: przewija pasek
       okno: numer okna ('*' oznacza obecne okno lub pasek typu root)
 wartość_przewinięcia: wartość dla przewinięcia: 'x' lub 'y' (opcjonalne), następnie '+', '-', 'b' (początek) lub 'e' (koniec), wartość (dla +/-), oraz opcjonalnie % (w celu przesunięcia % szerokości/wysokości, w przeciwnym wypadku wartość jest ilością znaków)

Przykłady:
  tworzy pasek z czasem, numerem  + nazwą bufora i dopełnianiem:
    /bar add mybar root bottom 1 0 [time],buffer_number+:+buffer_name,completion
  ukrywa pasek:
    /bar hide mybar
  przewija listę nicków a obecnym buforze o 10 linii w dół :
    /bar scroll nicklist * y+10
  przewija do końca listę nicków w obecnym buforze:
    /bar scroll nicklist * ye
----

[[command_weechat_buffer]]
[command]*`buffer`* zarządzaj buforami::

----
/buffer  list
         clear [<number>|<name>|-merged|-all [<number>|<name>...]]
         move <number>|-|+
         swap <number1>|<name1> [<number2>|<name2>]
         merge <number>
         unmerge [<number>|-all]
         hide [<number>|<name>|-all [<number>|<name>...]]
         unhide [<number>|<name>|-all [<number>|<name>...]]
         renumber [<number1> [<number2> [<start>]]]
         close [<n1>[-<n2>]|<name>]
         notify <level>
         localvar
         set <property> <value>
         get <property>
         <number>|-|+|<name>

    list: list buffers (without argument, this list is displayed)
   clear: clear buffer content (number for a buffer, -merged for merged buffers, -all for all buffers, or nothing for current buffer)
    move: move buffer in the list (may be relative, for example -1); "-" = move to first buffer number, "+" = move to last buffer number + 1
    swap: swap two buffers (swap with current buffer if only one number/name given)
   merge: merge current buffer to another buffer (chat area will be mix of both buffers)
          (by default ctrl-x switches between merged buffers)
 unmerge: unmerge buffer from other buffers which have same number
    hide: hide the buffer
  unhide: unhide the buffer
renumber: renumber buffers (works only if option weechat.look.buffer_auto_renumber is off)
   close: close buffer (number/range or name is optional)
  notify: set notify level for current buffer: this level determines whether buffer will be added to hotlist or not:
               none: never
          highlight: for highlights only
            message: for messages from users + highlights
                all: all messages
              reset: reset to default value (all)
localvar: display local variables for current buffer
     set: set a property for current buffer
     get: display a property of current buffer
  number: jump to buffer by number, possible prefix:
          '+': relative jump, add number to current
          '-': relative jump, sub number to current
          '*': jump to number, using option "weechat.look.jump_current_to_previous_buffer"
       -: jump to first buffer number
       +: jump to last buffer number
    name: jump to buffer by (partial) name

Examples:
  clear current buffer:
    /buffer clear
  move buffer to number 5:
    /buffer move 5
  swap buffer 1 with 3:
    /buffer swap 1 3
  swap buffer #weechat with current buffer:
    /buffer swap #weechat
  merge with core buffer:
    /buffer merge 1
  unmerge buffer:
    /buffer unmerge
  close current buffer:
    /buffer close
  close buffers 5 to 7:
    /buffer close 5-7
  jump to #weechat:
    /buffer #weechat
  jump to next buffer:
    /buffer +1
  jump to last buffer number:
    /buffer +
----

[[command_weechat_color]]
[command]*`color`* definiuje aliasy i wyświetla paletę kolorów::

----
/color  alias <color> <name>
        unalias <color>
        reset
        term2rgb <color>
        rgb2term <rgb> [<limit>]
        -o

   alias: add an alias for a color
 unalias: delete an alias
   color: color number (greater than or equal to 0, max depends on terminal, commonly 63 or 255)
    name: alias name for color (for example: "orange")
   reset: reset all color pairs (required when no more color pairs are available if automatic reset is disabled, see option weechat.look.color_pairs_auto_reset)
term2rgb: convert a terminal color (0-255) to RGB color
rgb2term: convert a RGB color to terminal color (0-255)
   limit: number of colors to use in terminal table (starting from 0); default is 256
      -o: send terminal/colors info to current buffer as input

Without argument, this command displays colors in a new buffer.

Examples:
  add alias "orange" for color 214:
    /color alias 214 orange
  delete color 214:
    /color unalias 214
----

[[command_weechat_command]]
[command]*`command`* wywołaj wyraźnie komendę WeeChat lub wtyczki::

----
/command  [-buffer <name>] <plugin> <command>

-buffer: execute the command on this buffer
 plugin: execute the command from this plugin; 'core' for a WeeChat command, '*' for automatic plugin (it depends on the buffer where the command is executed)
command: command to execute (a '/' is automatically added if not found at beginning of command)
----

[[command_weechat_cursor]]
[command]*`cursor`* wolne poruszanie kursora na ekranie, w celu wykonania akcji na konkretnych obszarach ekranu::

----
/cursor  go chat|<pasek>|<x>,<y>
         move up|down|left|right|area_up|area_down|area_left|area_right
         stop

  go: przesuwa kursor do obszaru rozmowy, paska (używając nazwy paska) lub położenia "x,y"
move: przesuwa kursor w kierunku
stop: wyłącza tryb kursora

Bez argumentu komenda przełącza obsługę kursora.

Kiedy obsługa myszy jest włączona (zobacz /help mouse), domyślnie wciśnięcie środkowego przycisku włącza tryb kursora we wskazanym punkcie.

Przykłady:
  przejdź do listy nicków:
    /cursor go nicklist
  przejdź do współrzędnych x=10, y=5:
    /cursor go 10,5
----

[[command_weechat_debug]]
[command]*`debug`* kontrola debugu dla rdzenia/wtyczek::

----
/debug  list
        set <wtyczka> <poziom>
        dump [<wtyczka>]
        buffer|color|infolists|memory|tags|term|windows
        mouse|cursor [verbose]
        hdata [free]

     list: wyświetla wtyczki z poziomem debugowania
      set: ustawia poziom debugowania dla wtyczki
   plugin: nazwa wtyczki ("core" dla rdzenia WeeChat)
    poziom: poziom debugowania wtyczki (0 = wyłączony)
     dump: zachowuje zrzut pamięci w pliku z logiem WeeChat (taki sam zrzut jest zapisywany podczas awarii WeeChat)
   buffer: zrzuca zawartość bufora z wartościami heksadecymalnymi do pliku z logiem
    color: wyświetla informacje na temat obecnych par kolorów
   cursor: przełącza debugowanie dla trybu kursora
     dirs: wyświetla katalogi
    hdata: wyświetla informacje o hdata (z free: usuwa wszystkie hdata z pamięci)
    hooks: wyświetla informacje o hooks
infolists: wyświetla informacje o infolistach
     libs: wyświetla informacje o użytych zewnętrznych bibliotekach
   memory: wyświetla informacje o zużyciu pamięci
    mouse: przełącza debugowanie myszy
     tags: wyświetla tagi dla linii
     term: wyświetla informacje o terminalu
  windows: wyświetla drzewo okien
----

[[command_weechat_eval]]
[command]*`eval`* przetwarza wyrażenie i wysyła wynik do buforu::

----
/eval  [-n] <wyrażenie>
       [-n] -c <wyrażenie1> <operator> <wyrażenie2>

        -n: display result without sending it to buffer (debug mode)
        -c: evaluate as condition: use operators and parentheses, return a boolean value ("0" or "1")
expression: expression to evaluate, variables with format ${variable} are replaced (see below)
  operator: a logical or comparison operator:
            - logical operators:
                &&  boolean "and"
                ||  boolean "or"
            - comparison operators:
                ==  equal
                !=  not equal
                <=  less or equal
                <   less
                >=  greater or equal
                >   greater
                =~  is matching POSIX extended regex
                !~  is NOT matching POSIX extended regex

An expression is considered as "true" if it is not NULL, not empty, and different from "0".
The comparison is made using integers if the two expressions are valid integers.
To force a string comparison, add double quotes around each expression, for example:
  50 > 100      ==> 0
  "50" > "100"  ==> 1

Some variables are replaced in expression, using the format ${variable}, variable can be, by order of priority:
  1. a string with escaped chars (format: "esc:xxx" or "\xxx")
  2. a color (format: "color:xxx")
  3. an info (format: "info:name,arguments", arguments are optional)
  4. an option (format: "file.section.option")
  5. a local variable in buffer
  6. a hdata name/variable (the value is automatically converted to string), by default "window" and "buffer" point to current window/buffer.
Format for hdata can be one of following:
  hdata.var1.var2...: start with a hdata (pointer must be known), and ask variables one after one (other hdata can be followed)
  hdata[list].var1.var2...: start with a hdata using a list, for example:
    ${buffer[gui_buffers].full_name}: full name of first buffer in linked list of buffers
    ${plugin[weechat_plugins].name}: name of first plugin in linked list of plugins
For name of hdata and variables, please look at "Plugin API reference", function "weechat_hdata_get".

Examples (simple strings):
  /eval -n ${info:version}                 ==> 0.4.3
  /eval -n ${weechat.look.scroll_amount}   ==> 3
  /eval -n ${window}                       ==> 0x2549aa0
  /eval -n ${window.buffer}                ==> 0x2549320
  /eval -n ${window.buffer.full_name}      ==> core.weechat
  /eval -n ${window.buffer.number}         ==> 1
  /eval -n ${\t}                           ==> <tab>

Examples (conditions):
  /eval -n -c ${window.buffer.number} > 2  ==> 0
  /eval -n -c ${window.win_width} > 100    ==> 1
  /eval -n -c (8 > 12) || (5 > 2)          ==> 1
  /eval -n -c (8 > 12) && (5 > 2)          ==> 0
  /eval -n -c abcd =~ ^ABC                 ==> 1
  /eval -n -c abcd =~ (?-i)^ABC            ==> 0
  /eval -n -c abcd =~ (?-i)^abc            ==> 1
  /eval -n -c abcd !~ abc                  ==> 0
----

[[command_weechat_filter]]
[command]*`filter`* filtruje wiadomości w buforach, aby je ukryć/pokazać w zależności do tagów lub wyrażeń regularnych::

----
/filter  list
         enable|disable|toggle [<name>|@]
         add <name> <buffer>[,<buffer>...] <tags> <regex>
         rename <name> <new_name>
         del <name>|-all

   list: list all filters
 enable: enable filters (filters are enabled by default)
disable: disable filters
 toggle: toggle filters
   name: filter name ("@" = enable/disable all filters in current buffer)
    add: add a filter
 rename: rename a filter
    del: delete a filter
   -all: delete all filters
 buffer: comma separated list of buffers where filter is active:
         - this is full name including plugin (example: "irc.freenode.#weechat")
         - "*" means all buffers
         - a name starting with '!' is excluded
         - wildcard "*" is allowed
   tags: comma separated list of tags, for example "irc_join,irc_part,irc_quit"
         - logical "and": use "+" between tags (for example: "nick_toto+irc_action")
         - wildcard "*" is allowed
         - if tag starts with '!', then it is excluded and must NOT be in message
  regex: POSIX extended regular expression to search in line
         - use '\t' to separate prefix from message, special chars like '|' must be escaped: '\|'
         - if regex starts with '!', then matching result is reversed (use '\!' to start with '!')
         - two regular expressions are created: one for prefix and one for message
         - regex are case insensitive, they can start by "(?-i)" to become case sensitive

The default key alt+'=' toggles filtering on/off.

Tags most commonly used:
  no_filter, no_highlight, no_log, log0..log9 (log level),
  notify_none, notify_message, notify_private, notify_highlight,
  nick_xxx (xxx is nick in message), prefix_nick_ccc (ccc is color of nick),
  host_xxx (xxx is username + host in message),
  irc_xxx (xxx is command name or number, see /server raw or /debug tags),
  irc_numeric, irc_error, irc_action, irc_ctcp, irc_ctcp_reply, irc_smart_filter, away_info.
To see tags for lines in buffers: /debug tags

Examples:
  use IRC smart filter on all buffers:
    /filter add irc_smart * irc_smart_filter *
  use IRC smart filter on all buffers except those with "#weechat" in name:
    /filter add irc_smart *,!*#weechat* irc_smart_filter *
  filter all IRC join/part/quit messages:
    /filter add joinquit * irc_join,irc_part,irc_quit *
  filter nicks displayed when joining channels or with /names:
    /filter add nicks * irc_366 *
  filter nick "toto" on IRC channel #weechat:
    /filter add toto irc.freenode.#weechat nick_toto *
  filter IRC join/action messages from nick "toto":
    /filter add toto * nick_toto+irc_join,nick_toto+irc_action *
  filter lines containing "weechat sucks" on IRC channel #weechat:
    /filter add sucks irc.freenode.#weechat * weechat sucks
----

[[command_weechat_help]]
[command]*`help`* wyświetl pomoc na temat komend i opcji::

----
/help  -list|-listfull [<wtyczka> [<wtyczka>...]]
       <komenda>
       <komenda>

    -list: wyświetla komendy dla wtyczek (bez podania argumentu wyświetlana jest ta lista)
-listfull: wyświetla komendy dla wtyczek z opisami
   plugin: lista komend dla wtyczki
  komenda: nazwa komendy
   opcja: nazwa opcji (użyj /set aby zobaczyć listę)
----

[[command_weechat_history]]
[command]*`history`* pokaż historię komend bufora::

----
/history  clear
          <wartość>

clear: czyści historie
Wartość: ilość elementów historii do pokazania
----

[[command_weechat_input]]
[command]*`input`* funkcje linii komend::

----
/input  <akcja> [<argumenty>]

list of actions:
  return: simulate key "enter"
  complete_next: complete word with next completion
  complete_previous: complete word with previous completion
  search_text: search text in buffer
  search_switch_case: switch exact case for search
  search_switch_regex: switch search type: string/regular expression
  search_switch_where: switch search in messages/prefixes
  search_previous: search previous line
  search_next: search next line
  search_stop: stop search
  delete_previous_char: delete previous char
  delete_next_char: delete next char
  delete_previous_word: delete previous word
  delete_next_word: delete next word
  delete_beginning_of_line: delete from beginning of line until cursor
  delete_end_of_line: delete from cursor until end of line
  delete_line: delete entire line
  clipboard_paste: paste from clipboard
  transpose_chars: transpose two chars
  undo: undo last command line action
  redo: redo last command line action
  move_beginning_of_line: move cursor to beginning of line
  move_end_of_line: move cursor to end of line
  move_previous_char: move cursor to previous char
  move_next_char: move cursor to next char
  move_previous_word: move cursor to previous word
  move_next_word: move cursor to next word
  history_previous: recall previous command in current buffer history
  history_next: recall next command in current buffer history
  history_global_previous: recall previous command in global history
  history_global_next: recall next command in global history
  jump_smart: jump to next buffer with activity
  jump_last_buffer_displayed: jump to last buffer displayed (before last jump to a buffer)
  jump_previously_visited_buffer: jump to previously visited buffer
  jump_next_visited_buffer: jump to next visited buffer
  hotlist_clear: clear hotlist
  grab_key: grab a key (optional argument: delay for end of grab, default is 500 milliseconds)
  grab_key_command: grab a key with its associated command (optional argument: delay for end of grab, default is 500 milliseconds)
  grab_mouse: grab mouse event code
  grab_mouse_area: grab mouse event code with area
  set_unread: set unread marker for all buffers
  set_unread_current_buffer: set unread marker for current buffer
  switch_active_buffer: switch to next merged buffer
  switch_active_buffer_previous: switch to previous merged buffer
  zoom_merged_buffer: zoom on merged buffer
  insert: insert text in command line (escaped chars are allowed, see /help print)
  send: send text to the buffer
  paste_start: start paste (bracketed paste mode)
  paste_stop: stop paste (bracketed paste mode)

This command is used by key bindings or plugins.
----

[[command_weechat_key]]
[command]*`key`* dodaj/usuń przypisanie klawiszy::

----
/key  list|listdefault|listdiff [<kontekst>]
      bind <klawisz> [<komenda> [<argumenty>]]
      bindctxt <kontekst> <klawisz> [<komenda> [<argumenty>]]
      unbind <klawisz>
      unbindctxt <kontekst> <klawisz>
      reset <klawisz>
      resetctxt <kontekst> <klawisz>
      resetall -yes [<kontekst>]
      missing [<kontekst>]

       list: list all current keys (without argument, this list is displayed)
listdefault: list default keys
   listdiff: list differences between current and default keys (keys added, redefined or deleted)
    context: name of context ("default" or "search")
       bind: bind a command to a key or display command bound to key (for context "default")
   bindctxt: bind a command to a key or display command bound to key, for given context
    command: command (many commands can be separated by semicolons)
     unbind: remove a key binding (for context "default")
 unbindctxt: remove a key binding for given context
      reset: reset a key to default binding (for context "default")
  resetctxt: reset a key to default binding, for given context
   resetall: restore bindings to the default values and delete ALL personal bindings (use carefully!)
    missing: add missing keys (using default bindings), useful after installing new WeeChat version

When binding a command to a key, it is recommended to use key alt+k (or Esc then k), and then press the key to bind: this will insert key code in command line.

For context "mouse" (possible in context "cursor" too), key has format: "@area:key" or "@area1>area2:key" where area can be:
          *: any area on screen
       chat: chat area (any buffer)
  chat(xxx): char area for buffer with name "xxx" (full name including plugin)
     bar(*): any bar
   bar(xxx): bar "xxx"
    item(*): any bar item
  item(xxx): bar item "xxx"
Wildcard "*" is allowed in key to match many mouse events.
A special value for command with format "hsignal:name" can be used for context mouse, this will send the hsignal "name" with the focus hashtable as argument.
Another special value "-" can be used to disable key (it will be ignored when looking for keys).

Examples:
  key alt-x to toggle nicklist bar:
    /key bind meta-x /bar toggle nicklist
  key alt-r to jump to #weechat IRC channel:
    /key bind meta-r /buffer #weechat
  restore default binding for key alt-r:
    /key reset meta-r
  key "tab" to stop search in buffer:
    /key bindctxt search ctrl-I /input search_stop
  middle button of mouse on a nick to retrieve info on nick:
    /key bindctxt mouse @item(buffer_nicklist):button3 /msg nickserv info ${nick}
----

[[command_weechat_layout]]
[command]*`layout`* zarządzaj układami buforów/okien::

----
/layout  store [<nazwa>] [buffers|windows]
         apply [<nazwa>] [buffers|windows]
         leave
         del [<nazwa>] [buffers|windows]
         rename <nazwa> <nowa nazwa>

  store: zachowuje układ używając obecnych buforów/okien
  apply: stosuje zapisany układ
  leave: opuszcza obecny układ (nie aktualizuje żadnego układu)
    del: usuwa bufory i/lub okna w zapisanym układzie
         (jeśli zarówno "buffers" jak i "windows" nie zostaną podane po nazwie, układ jest kasowany)
 rename: zmienia nazwę układu
   nazwa: nazwa zapisanego układu (domyślnie "default")
buffers: zapisuje/stosuje tylko bufory (kolejność buforów)
windows: zapisuje/stosuje tylko okna (bufory wyświetlane w każdym oknie)

Komenda wywołana bez argumentów wyświetli zapisane układy.
----

[[command_weechat_mouse]]
[command]*`mouse`* kontrola myszy::

----
/mouse  enable|disable|toggle [<opóźnienie>]

 enable: włącza obsługę myszy
disable: wyłącza obsługę myszy
 toggle: przełącza obsługę myszy
  opóźnienie: czas (w sekundach), po którym początkowy stan obsługi myszy jest przywracany (przydatne do tymczasowego wyłączenia obsługi myszy)

Stan myszy jest zapisywany w opcji "weechat.look.mouse".

Przykłady:
  włączenie obsługi myszy:
    /mouse enable
  zmiana obsługi myszy na 5 sekund:
    /mouse toggle 5
----

[[command_weechat_mute]]
[command]*`mute`* wykonuje komendę po cichu::

----
/mute  [-core | -current | -buffer <name>] <command>

   -core: no output on WeeChat core buffer
-current: no output on current buffer
 -buffer: no output on specified buffer
    name: full buffer name (examples: "irc.server.freenode", "irc.freenode.#weechat")
 command: command to execute silently (a '/' is automatically added if not found at beginning of command)

If no target is specified (-core, -current or -buffer), then default is to mute all buffers.

Examples:
  config save:
    /mute save
  message to current IRC channel:
    /mute -current msg * hi!
  message to #weechat channel:
    /mute -buffer irc.freenode.#weechat msg #weechat hi!
----

[[command_weechat_plugin]]
[command]*`plugin`* lista/załaduj/wyładuj wtyczkę::

----
/plugin  list|listfull [<nazwa>]
         load <nazwapliku> [<argumenty>]
         autoload [<argumenty>]
         reload [<nazwa> [<argumenty>]]
         unload [<nazwa>]

    list: lista załadowanych wtyczek
listfull: lista załadowanych wtyczek (szczegółowa)
    load: ładuje wtyczkę
autoload: automatycznie ładuje wtyczki w katalogu systemowym lub użytkownika
  reload: przeładuje pojedynczą wtyczkę (jeśli nie podano nazwy, przeładuje wszystkie wtyczki)
  unload: wyładowuje wtyczkę (jeśli nie podano nazwy, wyładuje wszystkie wtyczkę
nazwapliku: wtyczka (plik) do załadowania
    nazwa: nazwa wtyczki
argumenty: argumenty przekazywane do wtyczki podczas ładowania

Bez argumentów ta komenda wyświetli wszystkie załadowane wtyczki.
----

[[command_weechat_print]]
[command]*`print`* wyświetl tekst w buforze::

----
/print  [-buffer <number>|<name>] [-core] [-escape] [-date <date>] [-tags <tags>] [-action|-error|-join|-network|-quit] [<text>]
        -stdout|-stderr [<text>]
        -beep

 -buffer: display text in this buffer (default: buffer where command is executed)
   -core: alias of "-buffer core.weechat"
-current: display text on current buffer
 -escape: interpret escaped chars (for example \a, \07, \x07)
   -date: message date, format can be:
            -n: 'n' seconds before now
            +n: 'n' seconds in the future
             n: 'n' seconds since the Epoch (see man time)
            date/time (ISO 8601): yyyy-mm-ddThh:mm:ss, example: 2014-01-19T04:32:55
            time: hh:mm:ss (example: 04:32:55)
   -tags: comma-separated list of tags (see /help filter for a list of tags most commonly used)
    text: text to display (prefix and message must be separated by "\t", if text starts with "-", then add a "\" before)
 -stdout: display text on stdout (escaped chars are interpreted)
 -stderr: display text on stderr (escaped chars are interpreted)
   -beep: alias of "-stderr \a"

The options -action ... -quit use the prefix defined in options "weechat.look.prefix_*".

Following escaped chars are supported:
  \" \\ \a \b \e \f \n \r \t \v \0ooo \xhh \uhhhh \Uhhhhhhhh

Examples:
  display a reminder on core buffer with a highlight:
    /print -core -tags notify_highlight Reminder: buy milk
  display an error on core buffer:
    /print -core -error Some error here
  display message on core buffer with prefix "abc":
    /print -core abc\tThe message
  display a message on channel #weechat:
    /print -buffer irc.freenode.#weechat Message on #weechat
  display a snowman (U+2603):
    /print -escape \u2603
  send alert (BEL):
    /print -beep
----

[[command_weechat_proxy]]
[command]*`proxy`* zarządzanie proxy::

----
/proxy  list
        add <nazwa> <typ> <adres> <port> [<użytkownik> [<hasło>]]
        del <nazwa>|-all
        set <nazwa> <opcja> <wartość>

    list: wyświetla wszystkie proxy
     add: dodaje nowe proxy
    nazwa: nazwa proxy (musi być unikalna)
    typ: http, socks4 lub socks5
 adres: adres IP lub nazwa hosta
    port: port
użytkownik: nazwa użytkownika (opcjonalne)
hasło: hasło (opcjonalne)
     del: usuwa proxy (albo wszystkie zdefiniowane proxy z -all)
     set: ustawia wartość dla właściwości proxy
  opcja: właściwość do zmiany (aby uzyskać listę dostępnych opcji spójrz na /set weechat.proxy.<nazwa proxy>.*)
   wartość: nowa wartość dla opcji

Przykłady:
  tworzy proxy http, uruchomione na hoście lokalnym i porcie 8888:
    /proxy add local http 127.0.0.1 8888
  tworzy proxy http wykorzystujące protokół IPv6:
    /proxy add local http ::1 8888
    /proxy set local ipv6 on
  tworzy proxy socks5 z nazwą użytkownika/hasłem:
    /proxy add myproxy socks5 sample.host.org 3128 myuser mypass
  usuwa proxy:
    /proxy del myproxy
----

[[command_weechat_quit]]
[command]*`quit`* zakończ WeeChat::

----
/quit  [-yes][<argumenty>]

     -yes: wymagane jeśli opcja weechat.look.confirm_quit jest włączona
argumenty: tekst wysłany na sygnał "quit"
           (na przykład wtyczka irc używa tego tekstu do wysłania wiadomości pożegnalnej na serwer)
----

[[command_weechat_reload]]
[command]*`reload`* przeładuj pliki konfiguracyjne z dysku::

----
/reload  [<plik> [<plik>...]]

plik: plik konfiguracyjny do przeładowania (bez rozszerzenia ".conf")

Bez podania argumentu wszystkie pliki (WeeChat oraz wtyczki) zostaną przeładowane.
----

[[command_weechat_repeat]]
[command]*`repeat`* wykonuje komendę kilka razy::

----
/repeat  [-interval <opóźnienie>] <ilość> <komenda>

  opóźnienie: czas pomiędzy wykonaniem komend (w milisekundach)
  ilość: ile razy wykonać komendę
komenda: komenda do wykonania ('/' jest automatycznie dodawane, jeśli nie znajduje się na początku komendy)

Wszystkie komendy wykonane zostaną na buforze, w którym wykonano tą komendę.

Przykład:
  przewija 2 strony do góry:
    /repeat 2 /window page_up
----

[[command_weechat_save]]
[command]*`save`* zapisuje pliki konfiguracyjne na dysku::

----
/save  [<plik> [<plik>...]]

plik: plik konfiguracyjny do przeładowania (bez rozszerzenia ".conf")

Bez podania argumentu wszystkie pliki (WeeChat oraz wtyczki) zostaną przeładowane.
----

[[command_weechat_secure]]
[command]*`secure`* zarządzanie zabezpieczonymi danymi (hasła lub dane poufne zaszyfrowane w pliku sec.conf)::

----
/secure  passphrase <hasło>|-delete
         decrypt <hasło>|-discard
         set <nazwa> <wartość>
         del <nazwa>

passphrase: change the passphrase (without passphrase, data is stored as plain text in file sec.conf)
   -delete: delete passphrase
   decrypt: decrypt data still encrypted (it happens only if passphrase was not given on startup)
  -discard: discard all data still encrypted
       set: add or change secured data
       del: delete secured data

Without argument, this command displays secured data in a new buffer.

When a passphrase is used (data encrypted), it is asked by WeeChat on startup.
It is possible to set environment variable "WEECHAT_PASSPHRASE" to prevent the prompt (this same variable is used by WeeChat on /upgrade).

Secured data with format ${sec.data.xxx} can be used in:
  - command line argument "--run-command"
  - options weechat.startup.command_{before|after}_plugins
  - proxy options: username, password
  - irc server options: autojoin, command, password, sasl_{username|password}, username, realname
  - option relay.network.password
  - command /eval.

Examples:
  set a passphrase:
    /secure passphrase this is my passphrase
  encrypt freenode SASL password:
    /secure set freenode mypassword
    /set irc.server.freenode.sasl_password "${sec.data.freenode}"
  encrypt oftc password for nickserv:
    /secure set oftc mypassword
    /set irc.server.oftc.command "/msg nickserv identify ${sec.data.oftc}"
  alias to ghost the nick "mynick":
    /alias ghost /eval /msg -server freenode nickserv ghost mynick ${sec.data.freenode}
----

[[command_weechat_set]]
[command]*`set`* set config options and environment variables::

----
/set  [<option> [<value>]]
      diff [<option> [<option>...]]
      env [<variable> [<value>]]

option: name of an option (wildcard "*" is allowed)
 value: new value for option, according to type:
          boolean: on, off or toggle
          integer: number, ++number or --number
           string: any string ("" for empty string)
            color: color name, ++number or --number
        Note: for all types, you can use null to remove option         value (undefined value). This works only for some special         plugin variables.
  diff: display only changed options
   env: display or set an environment variable (use value "" to unset a variable)

Examples:
  display options about highlight:
    /set *highlight*
  add a word to highlight:
    /set weechat.look.highlight "word"
  display changed options:
    /set diff
  display changed options in irc plugin:
    /set diff irc.*
  display value of environment variable LANG:
    /set env LANG
  set environment variable LANG and use it:
    /set env LANG fr_FR.UTF-8
    /upgrade
  unset environment variable ABC:
    /set env ABC ""
----

[[command_weechat_unset]]
[command]*`unset`* skasuj/zresetuj zmienną konfiguracyjną::

----
/unset  <opcja>

option: name of an option (wildcard "*" is allowed to mass-reset options, use carefully!)

According to option, it's reset (for standard options) or removed (for optional settings, like server values).

Examples:
  reset one option:
    /unset weechat.look.item_time_format
  reset all color options:
    /unset weechat.color.*
----

[[command_weechat_upgrade]]
[command]*`upgrade`* uaktualnia WeeChat bez rozłączania z serwerami::

----
/upgrade  [<ścieżka_do_binarki>|-quit]

ścieżka_do_binarki: ścieżka do pliku binarnego WeeChat (domyślnie jest to obecny plik)
        -dummy: nic nie rób (opcja użyta w celu zapobiegnięcia przypadkowego dopełnienia za pomocą"-quit")
         -quit: zamyka *WSZYSTKIE* połączenia, zapisuje sesję i wyłącza WeeChat, umożliwia to późniejsze przywrócenie (zobacz niżej)

Ta komenda ponownie uruchamia plik binarny WeeChat, zatem powinna zostać skompilowana lub zainstalowana za pomocą managera pakietów przed uruchomieniem tej komendy.

Uwaga: połączenia SSL są przerywane podczas uaktualniania, ponieważ przeładowanie sesji SSL nie jest obecnie możliwe za pomocą GnuTLS. Po uaktualnieniu nastąpi ponowne ich połączenie.

Proces uaktualnienia składa się z 4 kroków:
  1. zapisania sesji do plików dla rdzenia i wtyczek (bufory, historia, ..)
  2. wyładowanie wszystkich wtyczek (zapisanie plików konfiguracyjnych *.conf)
  3. zapisanie konfiguracji WeeChat (weechat.conf)
  4. uruchomienie nowego pliku binarnego WeeChat i przeładowanie sesji.

Z opcją "-quit", proces przebiega inaczej:
  1. zamknięcie *WSZYSTKICH* połączeń (irc, xfer, relay, ...)
  2. zapisanie sesji do pliku (*.upgrade)
  3. wyładowanie wszystkich wtyczek
  4. zapisanie konfiguracji WeeChat
  5. wyłączenie WeeChat
Następnie można przywrócić sesję za pomocą komendy: weechat --upgrade
WAŻNE: należy przywracać sesję z identyczną konfiguracją (pliki *.conf).
Jest możliwe przywrócenie sesji WeeChat na innej maszynie, jeśli skopiujemy zawartość katalogu "~/.weechat".
----

[[command_weechat_uptime]]
[command]*`uptime`* pokazuje czas pracy WeeChat::

----
/uptime  [-o | -ol]

 -o: wysyła uptime jako wejście do obecnego bufora (po angielsku)
-ol: wysyła uptime jako wejście do obecnego bufora (przetłumaczony)
----

[[command_weechat_version]]
[command]*`version`* pokazuje wersję i datę, kiedy skompilowano WeeChat::

----
/version  [-o | -ol]

 -o: wysyła wersje jako wejście do obecnego bufora (po angielsku)
-ol: wysyła wersje jako wejście do obecnego bufora (przetłumaczony)
----

[[command_weechat_wait]]
[command]*`wait`* planuje komendę do wykonania w przyszłości::

----
/wait  <liczba>[<jednostka>] <komenda>

 liczba: ilość czasu do odczekania (liczba całkowita)
   jednostka: opcjonalnie, możliwe wartości:
           ms: milisekundy
            s: sekundy (domyślnie)
            m: minuty
            h: godziny
komenda: komenda do wykonania (lub tekst do wysłania do bufora jeżeli komenda nie zaczyna się od  '/')

Ważne: komenda zostanie wykonana w buforze, gdzie zostało wykonane /wait (jeśli bufor nie zostanie znaleziony(na przykład jeśli został zamknięty przed wykonaniem komendy), wtedy komenda wykona się w głównym buforze WeeChat).

Przykłady:
  wejdzie na kanał za 10 sek:
    /wait 10 /join #test
  ustawi stan nieobecności za 15 min:
    /wait 15m /away -all I'm away
  napisze 'hello' za 2 min:
    /wait 2m hello
----

[[command_weechat_window]]
[command]*`window`* zarządza oknami::

----
/window  list
         -1|+1|b#|up|down|left|right [-window <number>]
         <number>
         splith|splitv [-window <number>] [<pct>]
         resize [-window <number>] [+/-]<pct>
         balance
         merge [-window <number>] [all]
         page_up|page_down [-window <number>]
         refresh
         scroll [-window <number>] [+/-]<value>[s|m|h|d|M|y]
         scroll_horiz [-window <number>] [+/-]<value>[%]
         scroll_up|scroll_down|scroll_top|scroll_bottom|scroll_beyond_end|scroll_previous_highlight|scroll_next_highlight|scroll_unread [-window <number>]
         swap [-window <number>] [up|down|left|right]
         zoom[-window <number>]
         bare [<delay>]

         list: list opened windows (without argument, this list is displayed)
           -1: jump to previous window
           +1: jump to next window
           b#: jump to next window displaying buffer number #
           up: switch to window above current one
         down: switch to window below current one
         left: switch to window on the left
        right: switch to window on the right
       number: window number (see /window list)
       splith: split current window horizontally
       splitv: split current window vertically
       resize: resize window size, new size is <pct> percentage of parent window
      balance: balance the sizes of all windows
        merge: merge window with another (all = keep only one window)
      page_up: scroll one page up
    page_down: scroll one page down
      refresh: refresh screen
       scroll: scroll a number of lines (+/-N) or with time: s=seconds, m=minutes, h=hours, d=days, M=months, y=years
 scroll_horiz: scroll horizontally a number of columns (+/-N) or percentage of window size (this scrolling is possible only on buffers with free content)
    scroll_up: scroll a few lines up
  scroll_down: scroll a few lines down
   scroll_top: scroll to top of buffer
scroll_bottom: scroll to bottom of buffer
scroll_beyond_end: scroll beyond the end of buffer
scroll_previous_highlight: scroll to previous highlight
scroll_next_highlight: scroll to next highlight
scroll_unread: scroll to unread marker
         swap: swap buffers of two windows (with optional direction for target window)
         zoom: zoom on window
         bare: toggle bare display (with optional delay in seconds for automatic return to standard display mode)

For splith and splitv, pct is a percentage which represents size of new window, computed with current window as size reference. For example 25 means create a new window with size = current_size / 4

Examples:
  jump to window displaying buffer #1:
    /window b1
  scroll 2 lines up:
    /window scroll -2
  scroll 2 days up:
    /window scroll -2d
  scroll to beginning of current day:
    /window scroll -d
  zoom on window #2:
    /window zoom -window 2
  enable bare display for 2 seconds:
    /window bare 2
----

