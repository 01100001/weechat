[command]*`away`* attiva/disattiva lo stato di assenza::
........................................
/away  [-all] [<message>]

     -all: attiva/disattiva lo stato di assenza su tutti i server connessi
messaggio: messaggio di assenza (se non specificato, lo stato di assenza viene rimosso)
........................................

[command]*`bar`* gestione barre::
........................................
/bar  list|listfull|listitems
      add <name> <type>[,<cond1>[,<cond2>...]] <position> <size> <separator> <item1>[,<item2>...]
      default
      del <name>|-all
      set <name> <option> <value>
      hide|show|toggle <name>
      scroll <name> <buffer> <scroll_value>

         list: list all bars
     listfull: list all bars (verbose)
    listitems: list all bar items
          add: add a new bar
         name: name of bar (must be unique)
         type:   root: outside windows,
               window: inside windows, with optional conditions (see below)
    cond1,...: condition(s) for displaying bar (only for type "window"):
                 active: on active window
               inactive: on inactive windows
               nicklist: on windows with nicklist
               without condition, bar is always displayed
     position: bottom, top, left or right
         size: size of bar (in chars)
    separator: 1 for using separator (line), 0 or nothing means no separator
    item1,...: items for this bar (items can be separated by comma (space between items) or "+" (glued items))
      default: create default bars
          del: delete a bar (or all bars with -all)
          set: set a value for a bar property
       option: option to change (for options list, look at /set weechat.bar.<barname>.*)
        value: new value for option
         hide: hide a bar
         show: show an hidden bar
       toggle: hide/show a bar
       scroll: scroll bar
       buffer: name of buffer to scroll ('*' means current buffer, you should use '*' for root bars)
 scroll_value: value for scroll: 'x' or 'y', followed by '+', '-', 'b' (beginning) or 'e' (end), value (for +/-), and optional %% (to scroll by %% of width/height, otherwise value is number of chars)

Examples:
  create a bar with time, buffer number + name, and completion:
    /bar add mybar root bottom 1 0 [time],buffer_number+:+buffer_name,completion
  hide a bar:
    /bar hide mybar
  scroll nicklist 10 lines down on current buffer:
    /bar scroll nicklist * y+10
  scroll nicklist one page up on #weechat buffer:
    /bar scroll nicklist #weechat y-100%
  scroll to end of nicklist on current buffer:
    /bar scroll nicklist * ye
........................................

[command]*`buffer`* gestione buffer::
........................................
/buffer  list
         clear [<number>|-merged|-all]
         move|merge <number>
         unmerge [<number>]
         close [<n1>[-<n2>]]
         notify <level>
         localvar
         set <property> <value>
         get <property>
         <number>|<name>

    list: list buffers (without argument, this list is displayed)
   clear: clear buffer content (number for a buffer, -merged for merged buffers, -all for all buffers, or nothing for current buffer)
    move: move buffer in the list (may be relative, for example -1)
   merge: merge current buffer to another buffer (chat area will be mix of both buffers)
          (by default ctrl-x switches between merged buffers)
 unmerge: unmerge buffer from other buffers which have same number
   close: close buffer (number/range is optional)
  notify: set notify level for current buffer: this level determines whether buffer will be added to hotlist or not:
               none: never
          highlight: for highlights only
            message: for messages from users + highlights
                all: all messages
              reset: reset to default value (all)
localvar: display local variables for current buffer
     set: set a property for current buffer
     get: display a property of current buffer
  number: jump to buffer by number, possible prefix:
          '+': relative jump, add number to current
          '-': relative jump, sub number to current
          '*': jump to number, using option "weechat.look.jump_current_to_previous_buffer"
    name: jump to buffer by (partial) name

Examples:
  clear current buffer:
    /buffer clear
  move buffer to number 5:
    /buffer move 5
  merge with core buffer:
    /buffer merge 1
  unmerge buffer:
    /buffer unmerge
  close current buffer:
    /buffer close
  close buffers 5 to 7:
    /buffer close 5-7
  jump to #weechat:
    /buffer #weechat
  jump to next buffer:
    /buffer +1
........................................

[command]*`color`* define color aliases and display palette of colors::
........................................
/color  alias <color> <alias>
        unalias <color>
        reset

  alias: add an alias for a color
unalias: delete an alias
  color: color number (>= 1, max depends on terminal, commonly 63 or 255)
   name: alias name for color (for example: "orange")
  reset: reset all color pairs (useful when no more pairs are available)

Without argument, this command displays colors in a new buffer.

Examples:
  add alias "orange" for color 214:
    /color alias 214 orange
  delete color 214:
    /color unalias 214
........................................

[command]*`command`* esegui comando o plugin di WeeChat esplicito::
........................................
/command  <plugin> <command>

 plugin: nome plugin ('weechat' per il comando interno di WeeChat)
comando: comando da eseguire (una '/' viene aggiunta automaticamente se non trovata all'inizio del comando)
........................................

[command]*`debug`* attiva debug per core/plugin::
........................................
/debug  list
        set <plugin> <level>
        dump [<plugin>]
        buffer|windows|term|color

   list: list plugins with debug levels
    set: set debug level for plugin
 plugin: name of plugin ("core" for WeeChat core)
  level: debug level for plugin (0 = disable debug)
   dump: save memory dump in WeeChat log file (same dump is written when WeeChat crashes)
 buffer: dump buffer content with hexadecimal values in log file
windows: display windows tree
   term: display infos about terminal
  color: display infos about current color pairs
........................................

[command]*`filter`* filtra messaggi nei buffer, per nascondere/mostrare in base a tag o regexp::
........................................
/filter  list
         enable|disable|toggle [<name>]
         add <name> <plugin.buffer> <tags> <regex>
         del <name>|-all

         list: elenca tutti i filtri
       enable: abilita filtri (i filtri sono abilitati di default)
      disable: disabilita filtri
       toggle: abilita/disabilita filtri
         nome: nome del filtro
          add: aggiunge un filtro
          del: elimina un filtro
         -all: elimina tutti i filtri
plugin.buffer: plugin e buffer in cui il filtro è attivo ("*" per tutti i buffer)
          tag: elenco di tag separati da virgole, per esempio: "irc_join,irc_part,irc_quit"
        regex: espressione regolare da cercare nella riga
               - utilizzare '	' per separare il prefisso dal messaggio, caratteri speciali come "|" devono essere preceduti dal carattere escape: '\|')
               - se l'espressione regolare inizia con '!', il risultato corrispondente viene invertito (usare '\!' per iniziare con '!')

		nota: vengono create due espressioni regolari: una per il prefisso e l'altra per il messaggio

Il tasto predefinito alt+'=' abilita/disabilita il filtro.

Tag utilizzati di frequente:
  no_filter, no_highlight, no_log, log0..log9 (livello di log),
  notify_message, notify_private, notify_highlight,
  nick_xxx (xxx è il nick nel messaggio),
  irc_xxx (xxx è il nome comando o il numero, consultare /server raw),   irc_numeric, irc_error, irc_action, irc_ctcp, irc_ctcp_reply, irc_smart_filter, away_info.

Esempi:
  usa il filtro intelligente IRC per i messaggi di entrata/uscita/abbandono:
     /filter add irc_smart * irc_smart_filter *
  filtra tutti i messaggi entrata/uscita/abbandono di IRC:
     /filter add joinquit * irc_join,irc_part,irc_quit *
  filtra i nick visualizzati all'ingresso in un canale o con /names:
    /filter add nicks * irc_366 *
  filtra il nick "tizio" sul canale IRC #weechat
    /filter add tizio irc.freenode.#esempio * tizio\t
  filtra solo il nick "caio" sul canale IRC #test:
    /filter add caio irc.freenode.#test * !caio\t
  filtra le righe contententi la parola "spam":
    /filter add filterspam * * spam
  filtra le righe contententi "weechat fa schifo" sul canale IRC #weechat:
    /filter add schifo irc.freenode.#weechat * weechat fa schifo
........................................

[command]*`help`* visualizza l'aiuto su comandi e opzioni::
........................................
/help  <command>
       <option>

comando: nome comando
opzione: nome opzione (utilizza /set per vedere l'elenco)
........................................

[command]*`history`* mostra la cronologia dei comandi del buffer::
........................................
/history  clear
          <value>

 clear: pulisci cronologia
valore: numero delle voci nella cronologia da mostrare
........................................

[command]*`input`* funzioni per la riga di comando::
........................................
/input  <action> [<arguments>]

list of actions:
  return: simulate key "enter"
  complete_next: complete word with next completion
  complete_previous: complete word with previous completion
  search_text: search text in buffer
  delete_previous_char: delete previous char
  delete_next_char: delete next char
  delete_previous_word: delete previous word
  delete_next_word: delete next word
  delete_beginning_of_line: delete from beginning of line until cursor
  delete_end_of_line: delete from cursor until end of line
  delete_line: delete entire line
  clipboard_paste: paste from clipboard
  transpose_chars: transpose two chars
  undo: undo last command line action
  redo: redo last command line action
  move_beginning_of_line: move cursor to beginning of line
  move_end_of_line: move cursor to end of line
  move_previous_char: move cursor to previous char
  move_next_char: move cursor to next char
  move_previous_word: move cursor to previous word
  move_next_word: move cursor to next word
  history_previous: recall previous command in current buffer history
  history_next: recall next command in current buffer history
  history_global_previous: recall previous command in global history
  history_global_next: recall next command in global history
  jump_smart: jump to next buffer with activity
  jump_last_buffer: jump to last buffer
  jump_previously_visited_buffer: jump to previously visited buffer
  jump_next_visited_buffer: jump to next visited buffer
  hotlist_clear: clear hotlist
  grab_key: grab a key
  grab_key_command: grab a key with its associated command
  scroll_unread: scroll to unread marker
  set_unread: set unread marker for all buffers
  set_unread_current_buffer: set unread marker for current buffer
  switch_active_buffer: switch to next merged buffer
  switch_active_buffer_previous: switch to previous merged buffer
  insert: insert text in command line

This command is used by key bindings or plugins.
........................................

[command]*`key`* associa/disassocia tasti::
........................................
/key  list|listdefault|listdiff
      bind <key> [<command> [<args>]]
      unbind <key>
      reset <key>
      resetall -yes
      missing

       list: elenca tutti i tasti correnti (senza argomento, viene visualizzata questa lista)
listdefault: elenca i tasti predefiniti
   listdiff: elenca le differenze tra tasti attuali e predefiniti (tasti aggiunti, ridefiniti o eliminati)
       bind: associa un comando ad un tasto o visualizza il comando associato al tasto
     unbind: rimuove una associazione di tasti
      reset: ripristina un tasto all'assegnazione predefinita
   resetall: ripristina le associazioni ai valori predefiniti ed elimina TUTTE le associazioni personalizzate (usare con cautela!)
    missing: aggiunge tasti mancanti (utilizzando le associazioni predefinite), utile dopo l'installazione di una nuova versione di WeeChat

Al momento di associare un comando ad un tasto si raccomanda di utilizzare il tasto alt+k (oppure Esc e k), e digitare il tasto da associare: il codice tasto verrà inserito nella riga di comando.

Esempi:
  il tasto alt-x per alternare la barra della nicklist:
    /key bind meta-x /bar toggle nicklist
  il tasto alt-r per passare al canale IRC #weechat:
    /key bind meta-r /buffer #weechat
  ripristinare l'associazione predefinita per il tasto alt-r:
    /key reset meta-r
........................................

[command]*`layout`* salva/applica/ripristina il layout per i buffer e le finestre::
........................................
/layout  save [buffers|windows]
         apply [buffers|windows]
         reset [buffers|windows]

   save: salva il layout corrente
  apply: applica il layout salvato
  reset: elimina il layout salvato
buffers: salva/applica modifiche solo ai buffer (ordine dei buffer)
windows: salva/applica modifiche solo alle finestre (buffer visualizzato da ogni finestra)

Senza argomenti, il comando visualizza il layout salvato.
........................................

[command]*`mute`* esegue un comando in silenzio::
........................................
/mute  [-current | -buffer <name> | -all] command

-current: nessun output sul buffer corrente
 -buffer: nessun output sul buffer specificato
    nome: nome completo del buffer (esempi: "irc.server.freenode", "irc.freenode.#weechat")
    -all: nessun output su TUTTI i buffer
 command: comando da eseguire in silenzio (una '/' viene aggiunta automaticamente all'inizio del comando se non trovata)

Se non viene specificata una destinazione (-current, -buffer o -all), la destinazione predefinita è il buffer core di WeeChat.

Esempi:
  salva la configurazione:
    /mute save
  messaggio sul canale IRC corrente:
    /mute -current msg * ciao!
  messaggio sul canale #weechat:
    /mute -buffer irc.freenode.#weechat msg #weechat ciao!
........................................

[command]*`plugin`* elenca/attiva/disattiva plugin::
........................................
/plugin  list|listfull [<name>]
         load <filename>
         autoload
         reload|unload [<name>]

    list: list loaded plugins
listfull: list loaded plugins (verbose)
    load: load a plugin
autoload: autoload plugins in system or user directory
  reload: reload a plugin (if no name given, unload all plugins, then autoload plugins)
  unload: unload a plugin (if no name given, unload all plugins)

Without argument, this command lists loaded plugins.
........................................

[command]*`proxy`* gestione proxy::
........................................
/proxy  list
        add <name> <type> <address> <port> [<username> [<password>]]
        del <name>|-all
        set <name> <option> <value>

    list: list all proxies
     add: add a new proxy
    name: name of proxy (must be unique)
    type: http, socks4 or socks5
 address: IP or hostname
    port: port
username: username (optional)
password: password (optional)
     del: delete a proxy (or all proxies with -all)
     set: set a value for a proxy property
  option: option to change (for options list, look at /set weechat.proxy.<proxyname>.*)
   value: new value for option

Examples:
  create a http proxy, running on local host, port 8888:
    /proxy add local http 127.0.0.1 8888
  create a http proxy using IPv6 protocol:
    /proxy add local http 127.0.0.1 8888
    /proxy set local ipv6 on
  create a socks5 proxy with username/password:
    /proxy add myproxy socks5 sample.host.org 3128 myuser mypass
  delete a proxy:
    /proxy del myproxy
........................................

[command]*`quit`* esce da WeeChat::
........................................
/quit  [-yes] [<arguments>]

     -yes: richiesto se l'opzione option weechat.look.confirm_quit è abilitata
argomenti: testo inviato con il segnale "quit"
           (ad esempio il plugin irc usa questo testo per inviare il messaggio di uscita al server)
........................................

[command]*`reload`* ricarica i file di configurazione da disco::
........................................
/reload  [<file> [<file>...]]

file: configuration file to reload (without extension ".conf")

Without argument, all files (WeeChat and plugins) are reloaded.
........................................

[command]*`save`* salva i file di configurazione su disco::
........................................
/save  [<file> [<file>...]]

file: configuration file to save (without extension ".conf")

Without argument, all files (WeeChat and plugins) are saved.
........................................

[command]*`set`* imposta le opzioni di configurazione::
........................................
/set  [<option> [<value>]]

option: name of an option (can start or end with "*" to list many options)
 value: new value for option

New value can be, according to variable type:
  boolean: on, off or toggle
  integer: number, ++number or --number
  string : any string ("" for empty string)
  color  : color name, ++number or --number

For all types, you can use null to remove option value (undefined value). This works only for some special plugin variables.

Examples:
  display options about highlight:
    /set *highlight*
  add a word to highlight:
    /set weechat.look.highlight "word"
........................................

[command]*`unset`* annulla/ripristina opzione::
........................................
/unset  <option>

option: name of an option (may begin or end with "*" to mass-reset options, use carefully!)

According to option, it's reset (for standard options) or removed (for optional settings, like server values).

Examples:
  reset one option:
    /unset weechat.look.item_time_format
  reset all color options:
    /unset weechat.color.*
........................................

[command]*`upgrade`* aggiorna WeeChat senza disconnettere dai server::
........................................
/upgrade  [<path_to_binary>]

path_to_binary: path to WeeChat binary (default is current binary)

This command run again a WeeChat binary, so it should have been compiled or installed with a package manager before running this command.

Upgrade process has 4 steps:
  1. save session into files for core and plugins (buffers, history, ..)
  2. unload all plugins (configuration files (*.conf) are written on disk)
  3. save WeeChat configuration (weechat.conf)
  4. execute new WeeChat binary and reload session.
........................................

[command]*`uptime`* mostra l'uptime di WeeChat::
........................................
/uptime  [-o | -ol]

 -o: invia l'uptime al buffer corrente come input (stringa in inglese)
-ol: invia l'uptime al buffer corrente come input (stringa tradotta)
........................................

[command]*`version`* mostra la versione e la data di compilazione di WeeChat::
........................................
/version  [-o | -ol]

 -o: invia la versione al buffer corrente come input (stringa inglese)
-ol: invia la versione al buffer corrente come input (stringa tradotta)
........................................

[command]*`wait`* pianifica l'esecuzione di un comando::
........................................
/wait  <number>[<unit>] <command>

 number: amount of time to wait (integer number)
   unit: optional, values are:
           ms: milliseconds
            s: seconds (default)
            m: minutes
            h: hours
command: command to execute (or text to send to buffer if command does not start with '/')

Note: command is executed on buffer where /wait was executed (if buffer is not found (for example if it has been closed before execution of command), then command is executed on WeeChat core buffer).

Examples:
  join channel in 10 seconds:
    /wait 10 /join #test
  set away in 15 minutes:
    /wait 15m /away -all I'm away
  say 'hello' in 2 minutes:
    /wait 2m hello
........................................

[command]*`window`* gestione finestre::
........................................
/window  list
         -1|+1|b#|up|down|left|right
         splith|splitv [<pct>]
         resize <pct>
         merge [all]
         page_up|page_down
         refresh
         scroll|scroll_up|scroll_down|scroll_top|scroll_bottom|scroll_previous_highlight|scroll_next_highlight
         zoom

         list: elenca le finestre aperte (senza argomento, questa lista viene visualizzata)
           -1: salta alla finestra precedente
           +1: salta alla finestra successiva
           b#: salta alla finestra successiva che visualizza il buffer numero #
           up: passa alla finestra superiore a quella corrente
         down: passa alla finestra inferiore a quella attiva
         left: passa alla finestra a sinistra
        right: passa alla finestra a destra
       splith: divide la finestra attiva orizzontalmente
       splitv: divide la finestra attiva verticalmente
       resize: ridimensiona finestra, la nuova dimensione è <pct> percentuale della finestra genitore
        merge: unisce la finestra con un'altra (all = mantiente una sola finestra)
      page_up: scorre di una pagina in alto
    page_down: scorre di una pagina in basso
      refresh: aggiorna lo schermo
       scroll: scorre di un numero di righe (+/-N) o in base al tempo: s=secondi, m=minuti, h=ore, d=giorni, M=mesi, y=anni
    scroll_up: scorre di alcune righe in alto
  scroll_down: scorre di alcune righe in basso
   scroll_top: scorre fino all'inizio del buffer
scroll_bottom: scorre fino alla fine del buffer buffer
scroll_previous_highlight: passa all'evento precedente
    scroll_next_highlight: passa all'evento successivo
         zoom: ingrandimento sulla finestra

Per splith e splitv, pct è una percentuale che rappresenta la dimensione della nuova finestra, calcolata con la finestra attiva come riferimento per la dimensione. Per esempio 25 vuol dire creare una finestra di dimensione = dimensione_attuale / 4

Esempi:
  salta alla finestra che visualizza il buffer #1:
    /window b1
  scorre di due righe in alto:
    /window scroll -2
  scorre all'indietro di due giorni:
    /window scroll -2d
  scorre all'inizio del giorno attuale:
     /window scroll -d
........................................

